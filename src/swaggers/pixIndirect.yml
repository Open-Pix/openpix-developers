openapi: 3.0.3
info:
  title: OpenPix - Indireto
  description: Documentação infraestrutura pix indireto.
  version: 1.0.0
servers: []
paths:
  /api/v1/decode/emv:
    post:
      tags:
        - decode
      summary: Parse EMV (PIX) QR code and optionally resolve COB/REC locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - emv
              properties:
                emv:
                  type: string
                  description: Raw EMV / PIX QR payload (text)
                  example: >-
                    00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486
      responses:
        '200':
          description: >-
            Parsed EMV payload with resolved COB and/or REC location (when
            available)
          content:
            application/json:
              schema:
                type: object
                properties:
                  emv:
                    type: object
                    properties:
                      payloadFormatIndicator:
                        type: string
                      pointOfInitiationMethod:
                        type: string
                        description: Present when EMV indicates a dynamic QR (e.g. "12")
                      merchantAccountInformationPix:
                        type: object
                        description: Parsed "26"/"00"... Pix merchant account info
                        properties:
                          gui:
                            type: string
                          pixKey:
                            type: string
                            description: UUID or key when Pix key present
                          url:
                            type: string
                            description: URL when location points to a COB/REC resource
                          additionalInformation:
                            type: string
                      merchantCategoryCode:
                        type: string
                      transactionCurrency:
                        type: string
                      transactionAmount:
                        type: string
                      countryCode:
                        type: string
                      merchantName:
                        type: string
                      merchantCity:
                        type: string
                      additionalDataFieldTemplate:
                        type: object
                        properties:
                          referenceLabel:
                            type: string
                      unreservedTemplates:
                        type: object
                        properties:
                          gui:
                            type: string
                          url:
                            type: string
                      crc:
                        type: string
                  cobLocation:
                    nullable: true
                    type: object
                    description: >-
                      Resolved COB (charge) location details when the EMV points
                      to a COB endpoint
                    properties:
                      isValid:
                        type: boolean
                      locationErrors:
                        type: array
                        items:
                          type: string
                      payload:
                        type: object
                        properties:
                          calendar:
                            type: object
                            properties:
                              presentation:
                                type: string
                                format: date-time
                              expiration:
                                type: integer
                              creation:
                                type: string
                                format: date-time
                          key:
                            type: string
                          debtor:
                            type: object
                            properties:
                              cpf:
                                type: string
                              name:
                                type: string
                          additionalInfo:
                            type: array
                            items:
                              type: object
                              properties:
                                name:
                                  type: string
                                value:
                                  type: string
                          revision:
                            type: integer
                          status:
                            type: string
                          txid:
                            type: string
                          value:
                            type: object
                            properties:
                              original:
                                type: string
                      url:
                        type: string
                  recLocation:
                    nullable: true
                    type: object
                    description: >-
                      Resolved REC (request for payment) location details when
                      EMV points to a REC endpoint
                    properties:
                      isValid:
                        type: boolean
                      locationErrors:
                        type: array
                        items:
                          type: string
                      payload:
                        type: object
                        properties:
                          updates:
                            type: array
                            items:
                              type: object
                              properties:
                                date:
                                  type: string
                                  format: date-time
                                status:
                                  type: string
                          calendar:
                            type: object
                            properties:
                              startDate:
                                type: string
                                format: date
                              periodicity:
                                type: string
                          idRec:
                            type: string
                          retryPolicy:
                            type: string
                          receiver:
                            type: object
                            properties:
                              cnpj:
                                type: string
                              participantIspb:
                                type: string
                              name:
                                type: string
                          value:
                            type: object
                            properties:
                              valueRec:
                                type: string
                          link:
                            type: object
                            properties:
                              contract:
                                type: string
                              debtor:
                                type: object
                                properties:
                                  cpf:
                                    type: string
                                  name:
                                    type: string
                      url:
                        type: string
              examples:
                parsedWithRecLocation:
                  summary: EMV parsed and REC location resolved
                  value:
                    emv:
                      payloadFormatIndicator: '01'
                      merchantAccountInformationPix:
                        gui: br.gov.bcb.pix
                        pixKey: f4c6089a-bfde-4c00-a2d9-9eaa584b0219
                        additionalInformation: CobrancaEstatica
                      merchantCategoryCode: '0000'
                      transactionCurrency: '986'
                      transactionAmount: '546.28'
                      countryCode: BR
                      merchantName: Pix
                      merchantCity: BRASILIA
                      additionalDataFieldTemplate:
                        referenceLabel: 84767c56c2ab4e65b6670de2a
                      unreservedTemplates:
                        gui: br.gov.bcb.pix
                        url: >-
                          qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf0788691
                      crc: '4486'
                    cobLocation: null
                    recLocation:
                      isValid: true
                      locationErrors: []
                      payload:
                        updates:
                          - date: '2025-10-24T18:42:58Z'
                            status: CRIADA
                        calendar:
                          startDate: '2025-10-24'
                          periodicity: SEMANAL
                        idRec: RN5481141720251024BnwNHejs9h9
                        retryPolicy: NAO_PERMITE
                        receiver:
                          cnpj: '44720743000101'
                          participantIspb: '54811417'
                          name: Woovi Demo
                        value:
                          valueRec: '0.01'
                        link:
                          contract: Woovi Demo - Pix Automático
                          debtor:
                            cpf: '15775023706'
                            name: Pedro Cliente
                      url: >-
                        qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf0788691
                parsedWithCobLocation:
                  summary: EMV parsed and COB location resolved
                  value:
                    emv:
                      payloadFormatIndicator: '01'
                      pointOfInitiationMethod: '12'
                      merchantAccountInformationPix:
                        gui: br.gov.bcb.pix
                        url: >-
                          qr-h.woovi.digital/qr/v2/cob/fb274322-221c-43d4-b58b-fab36d87c75c
                      merchantCategoryCode: '0000'
                      transactionCurrency: '986'
                      transactionAmount: '10.00'
                      countryCode: BR
                      merchantName: sibeliusip
                      merchantCity: Sao_Paulo
                      additionalDataFieldTemplate:
                        referenceLabel: fb274322-221c-43d4-b58b-f
                      crc: 0C98
                    cobLocation:
                      isValid: true
                      locationErrors: []
                      payload:
                        calendar:
                          presentation: '2025-02-25T13:27:54.168Z'
                          expiration: 86400
                          creation: '2025-02-12T16:59:22.939Z'
                        key: 4004901d-bd85-4769-8e52-cb4c42c506dc
                        debtor:
                          cpf: '62550186362'
                          name: Fulano de Tal
                        additionalInfo:
                          - name: Entrega
                            value: Residencial
                        revision: 0
                        status: ATIVA
                        txid: d71a2ffd7a7b468eba993cef83428583
                        value:
                          original: '120.58'
                      url: >-
                        qr-h.woovi.digital/qr/v2/cob/fb274322-221c-43d4-b58b-fab36d87c75c
                    recLocation: null
        '400':
          description: Bad request — invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: Invalid EMV payload
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: Internal server error occurred
      x-codeSamples:
        - lang: Node + Native
          source: |-
            const http = require('http');

            const options = {
              method: 'POST',
              hostname: 'undefinedundefined',
              port: null,
              path: '/api/v1/decode/emv',
              headers: {
                'content-type': 'application/json'
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on('data', function (chunk) {
                chunks.push(chunk);
              });

              res.on('end', function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              emv: '00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486'
            }));
            req.end();
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url http://undefinedundefined/api/v1/decode/emv \
              --header 'content-type: application/json' \
              --data '{"emv":"00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486"}'
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "http://undefinedundefined/api/v1/decode/emv",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => json_encode([
                'emv' => '00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486'
              ]),
              CURLOPT_HTTPHEADER => [
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPConnection("undefinedundefined")


            payload =
            "{\"emv\":\"00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486\"}"


            headers = { 'content-type': "application/json" }


            conn.request("POST", "/api/v1/decode/emv", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/v1/decode/emv\"\n\n\tpayload := strings.NewReader(\"{\\\"emv\\\":\\\"00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java + Okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"emv\":\"00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486\"}");

            Request request = new Request.Builder()
              .url("http://undefinedundefined/api/v1/decode/emv")
              .post(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Ruby + Native
          source: >-
            require 'uri'

            require 'net/http'


            url = URI("http://undefinedundefined/api/v1/decode/emv")


            http = Net::HTTP.new(url.host, url.port)


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request.body =
            "{\"emv\":\"00020126780014br.gov.bcb.pix0136f4c6089a-bfde-4c00-a2d9-9eaa584b02190216CobrancaEstatica5204000053039865406546.285802BR5903Pix6008BRASILIA6229052584767c56c2ab4e65b6670de2a80950014br.gov.bcb.pix2573qr-h.sandbox.pix.bcb.gov.br/rest/api/rec/4b62d4a088fe4f51bcb4c64cf078869163044486\"}"


            response = http.request(request)

            puts response.read_body
components: {}
tags: []
