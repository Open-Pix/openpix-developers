openapi: 3.0.3
info:
  title: Pix Location
  description: Pix Location
  version: 1.0.0
servers:
  - url: https://<name>.indireto.woovi-indireto.dev/location
    description: Staging
security: []
paths:
  /qr/v2/{locType}/{pixUrlAccessToken}:
    get:
      tags:
        - pixLocation
      summary: Get Pix location QR code information
      description: >
        Retrieve Pix location information and generate QR code data based on the
        location type and access token.

        This endpoint returns JOSE (JSON Object Signing and Encryption)
        formatted data for QR code generation.
      parameters:
        - name: locType
          in: path
          required: true
          schema:
            type: string
            enum:
              - cob
              - cobv
              - rec
          description: Type of Pix location
        - name: pixUrlAccessToken
          in: path
          required: true
          schema:
            type: string
          description: Access token for the Pix location
        - name: codMun
          in: query
          required: false
          schema:
            type: string
          description: Municipality code for location-specific data
        - name: DPP
          in: query
          required: false
          schema:
            type: string
          description: Additional location parameter
      responses:
        '200':
          description: Pix location QR code data retrieved successfully
          content:
            application/jose:
              schema:
                type: string
                description: JOSE formatted data for QR code generation
        '404':
          description: Pix location or charge not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
      x-codeSamples:
        - lang: Node + Native
          source: |-
            const http = require('https');

            const options = {
              method: 'GET',
              hostname: '',
              port: null,
              path: '%3Cname%3E.indireto.woovi-indireto.dev/location/qr/v2/%7BlocType%7D/%7BpixUrlAccessToken%7D?codMun=SOME_STRING_VALUE&DPP=SOME_STRING_VALUE',
              headers: {}
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on('data', function (chunk) {
                chunks.push(chunk);
              });

              res.on('end', function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https:///%3Cname%3E.indireto.woovi-indireto.dev/location/qr/v2/%7BlocType%7D/%7BpixUrlAccessToken%7D?codMun=SOME_STRING_VALUE&DPP=SOME_STRING_VALUE'
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https:///%3Cname%3E.indireto.woovi-indireto.dev/location/qr/v2/%7BlocType%7D/%7BpixUrlAccessToken%7D?codMun=SOME_STRING_VALUE&DPP=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("")


            conn.request("GET",
            "%3Cname%3E.indireto.woovi-indireto.dev/location/qr/v2/%7BlocType%7D/%7BpixUrlAccessToken%7D?codMun=SOME_STRING_VALUE&DPP=SOME_STRING_VALUE")


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https:///%3Cname%3E.indireto.woovi-indireto.dev/location/qr/v2/%7BlocType%7D/%7BpixUrlAccessToken%7D?codMun=SOME_STRING_VALUE&DPP=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java + Okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https:///%3Cname%3E.indireto.woovi-indireto.dev/location/qr/v2/%7BlocType%7D/%7BpixUrlAccessToken%7D?codMun=SOME_STRING_VALUE&DPP=SOME_STRING_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Ruby + Native
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https:///%3Cname%3E.indireto.woovi-indireto.dev/location/qr/v2/%7BlocType%7D/%7BpixUrlAccessToken%7D?codMun=SOME_STRING_VALUE&DPP=SOME_STRING_VALUE")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true


            request = Net::HTTP::Get.new(url)


            response = http.request(request)

            puts response.read_body
  /pix-location/v1/location:
    post:
      tags:
        - pixLocation
      summary: Create a new Pix location
      description: >
        Create a new Pix location with the specified type. The service will
        generate a unique

        access token and return the complete location information including the
        QR code URL.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PixLocationCreate'
      responses:
        '200':
          description: Pix location created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PixLocationResponse'
        '400':
          description: Bad request - invalid location type
          content:
            text/plain:
              schema:
                type: string
                example: Invalid type
        '500':
          description: Internal server error
      x-codeSamples:
        - lang: Node + Native
          source: |-
            const http = require('https');

            const options = {
              method: 'POST',
              hostname: '',
              port: null,
              path: '%3Cname%3E.indireto.woovi-indireto.dev/location/pix-location/v1/location',
              headers: {
                'content-type': 'application/json'
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on('data', function (chunk) {
                chunks.push(chunk);
              });

              res.on('end', function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({type: 'cob'}));
            req.end();
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https:///%3Cname%3E.indireto.woovi-indireto.dev/location/pix-location/v1/location \
              --header 'content-type: application/json' \
              --data '{"type":"cob"}'
        - lang: Php + Curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https:///%3Cname%3E.indireto.woovi-indireto.dev/location/pix-location/v1/location",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => json_encode([
                'type' => 'cob'
              ]),
              CURLOPT_HTTPHEADER => [
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("")


            payload = "{\"type\":\"cob\"}"


            headers = { 'content-type': "application/json" }


            conn.request("POST",
            "%3Cname%3E.indireto.woovi-indireto.dev/location/pix-location/v1/location",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https:///%3Cname%3E.indireto.woovi-indireto.dev/location/pix-location/v1/location\"\n\n\tpayload := strings.NewReader(\"{\\\"type\\\":\\\"cob\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java + Okhttp
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"type\":\"cob\"}");

            Request request = new Request.Builder()
              .url("https:///%3Cname%3E.indireto.woovi-indireto.dev/location/pix-location/v1/location")
              .post(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Ruby + Native
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https:///%3Cname%3E.indireto.woovi-indireto.dev/location/pix-location/v1/location")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request.body = "{\"type\":\"cob\"}"


            response = http.request(request)

            puts response.read_body
  servers:
    url: https://<name>.indireto.woovi-indireto.dev/location
    description: Staging
components:
  schemas:
    PixLocation:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the Pix location
        type:
          type: string
          enum:
            - cob
            - cobv
            - rec
          description: >-
            Type of Pix location (cob = charge, cobv = charge with value, rec =
            recommendation)
        location:
          type: string
          description: Full URL for the Pix location QR code
        pixUrlAccessToken:
          type: string
          description: Unique access token for the Pix location URL
        ispb:
          type: string
          description: ISPB (Instituto de Serviços de Pagamento Brasileiro) identifier
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
    PixLocationCreate:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - cob
            - cobv
            - rec
          description: Type of Pix location to create
    PixLocationResponse:
      type: object
      properties:
        location:
          type: object
          properties:
            id:
              type: string
              description: Unique identifier for the Pix location
            type:
              type: string
              enum:
                - cob
                - cobv
                - rec
              description: Type of Pix location
            location:
              type: string
              description: Full URL for the Pix location QR code
            pixUrlAccessToken:
              type: string
              description: Unique access token for the Pix location URL
    PixLocationGetParams:
      type: object
      properties:
        locType:
          type: string
          enum:
            - cob
            - cobv
            - rec
          description: Type of Pix location
        pixUrlAccessToken:
          type: string
          description: Access token for the Pix location
    PixLocationQueryParams:
      type: object
      properties:
        codMun:
          type: string
          description: Municipality code for location-specific data
        DPP:
          type: string
          description: Additional location parameter
    StatusResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
          description: Service status
        timestamp:
          type: string
          format: date-time
          description: Current timestamp
        version:
          type: string
          example: 1.0.0
          description: API version
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: A cobrança em questão não foi encontrada para a location requisitada
tags:
  - name: pixLocation
    description: |
      Endpoints to manage Pix Locations and QR code generation
