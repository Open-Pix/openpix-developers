{"openapi":"3.0.3","info":{"title":"OpenPix","description":"A OpenPix é uma Plataforma de Gestão de Pagamentos. Para utilizar nossa API você deve acessar  __[https://api.openpix.com.br/](https://api.openpix.com.br/)__ e somente o mesmo. A OpenPix não aceita subdominios para a API.\n\nVeja como configurar seu acesso a nossa API [aqui](https://developers.openpix.com.br/docs/apis/api-getting-started).","version":"1.0.0"},"servers":[{"url":"https://api.openpix.com.br","description":"Production server"}],"security":[{"AppID":[]}],"paths":{"/api/openpix/v1/charge/{id}":{"delete":{"tags":["charge"],"summary":"Delete a charge","parameters":[{"name":"id","in":"path","description":"charge ID or correlation ID. You will need URI encoding if your correlation ID has characters outside the ASCII set or reserved characters (%, \\#, /).","required":true,"schema":{"type":"string"},"examples":{"chargeId":{"value":"Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA=="},"correlationID":{"value":"fe7834b4060c488a9b0f89811be5f5cf"}}}],"responses":{"200":{"description":"The charge deleted","content":{"application/json":{"schema":{"type":"object","properties":{"status":{"type":"string"},"id":{"type":"string","description":"the id previously informed to be found and deleted"}},"example":{"status":"OK","id":"fe7834b4060c488a9b0f89811be5f5cf"}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/charge/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api.openpix.com.br/api/openpix/v1/charge/%7Bid%7D \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/charge/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"DELETE\", \"/api/openpix/v1/charge/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/charge/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/charge/%7Bid%7D\")\n  .delete(null)\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/charge/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]},"get":{"tags":["charge"],"summary":"Get one charge","parameters":[{"name":"id","in":"path","description":"charge ID or correlation ID. You will need URI encoding if your correlation ID has characters outside the ASCII set or reserved characters (%, \\#, /).","required":true,"schema":{"type":"string"},"examples":{"chargeId":{"value":"Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA=="},"correlationID":{"value":"fe7834b4060c488a9b0f89811be5f5cf"}}}],"responses":{"200":{"description":"The charge retrieve using the given ID","content":{"application/json":{"schema":{"type":"object","properties":{"charge":{"type":"object","$ref":"#/components/schemas/Charge"}},"example":{"charge":{"status":"ACTIVE","customer":{"name":"Dan","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31324227036","type":"BR:CPF"}},"value":100,"comment":"good","correlationID":"9134e286-6f71-427a-bf00-241681624586","paymentLinkID":"7777-6f71-427a-bf00-241681624586","paymentLinkUrl":"https://openpix.com.br/pay/9134e286-6f71-427a-bf00-241681624586","globalID":"Q2hhcmdlOjcxOTFmMWIwMjA0NmJmNWY1M2RjZmEwYg==","qrCodeImage":"https://api.openpix.dev/openpix/charge/brcode/image/9134e286-6f71-427a-bf00-241681624586.png","brCode":"000201010212261060014br.gov.bcb.pix2584http://localhost:5001/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao Paulo62360532867ba5173c734202ac659721306b38c963044BCA","additionalInfo":[{"key":"Product","value":"Pencil"},{"key":"Invoice","value":"18476"},{"key":"Order","value":"302"}],"expiresIn":2592000,"expiresDate":"2021-04-01T17:28:51.882Z","createdAt":"2021-03-02T17:28:51.882Z","updatedAt":"2021-03-02T17:28:51.882Z"}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/charge/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/openpix/v1/charge/%7Bid%7D \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/charge/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/charge/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/charge/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/charge/%7Bid%7D\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/charge/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/charge":{"get":{"tags":["charge"],"summary":"Get a list of charges","parameters":[{"in":"query","name":"start","schema":{"type":"string","format":"date-time","title":"Start Date","description":"Start date used in the query. Complies with RFC 3339.","example":"2020-01-01T00:00:00Z"}},{"in":"query","name":"end","schema":{"type":"string","format":"date-time","title":"End Date","description":"End date used in the query. Complies with RFC 3339.","example":"2020-12-01T17:00:00Z"}},{"name":"status","in":"query","schema":{"type":"string","enum":["ACTIVE","COMPLETED","EXPIRED"]}}],"responses":{"200":{"description":"A list of charges","content":{"application/json":{"schema":{"type":"object","properties":{"charges":{"type":"array","items":{"$ref":"#/components/schemas/Charge"}},"pageInfo":{"type":"object","properties":{"errors":{"type":"array","items":{"type":"object","properties":{"message":{"type":"string"},"data":{"type":"object","properties":{"skip":{"type":"number"},"limit":{"type":"number"}}}}}},"skip":{"type":"number"},"limit":{"type":"number"},"totalCount":{"type":"number"},"hasPreviousPage":{"type":"boolean"},"hasNextPage":{"type":"boolean"}}}},"example":{"pageInfo":{"skip":0,"limit":10,"totalCount":20,"hasPreviousPage":false,"hasNextPage":true},"charges":{"status":"ACTIVE","customer":{"name":"Dan","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31324227036","type":"BR:CPF"}},"value":100,"comment":"good","correlationID":"9134e286-6f71-427a-bf00-241681624586","paymentLinkID":"7777a23s-6f71-427a-bf00-241681624586","paymentLinkUrl":"https://openpix.com.br/pay/9134e286-6f71-427a-bf00-241681624586","qrCodeImage":"https://api.openpix.dev/openpix/charge/brcode/image/9134e286-6f71-427a-bf00-241681624586.png","brCode":"000201010212261060014br.gov.bcb.pix2584http://localhost:5001/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao Paulo62360532867ba5173c734202ac659721306b38c963044BCA","additionalInfo":[{"key":"Product","value":"Pencil"},{"key":"Invoice","value":"18476"},{"key":"Order","value":"302"}],"expiresIn":2592000,"expiresDate":"2021-04-01T17:28:51.882Z","createdAt":"2021-03-02T17:28:51.882Z","updatedAt":"2021-03-02T17:28:51.882Z"}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/charge?start=2020-01-01T00%3A00%3A00Z&end=2020-12-01T17%3A00%3A00Z&status=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api.openpix.com.br/api/openpix/v1/charge?start=2020-01-01T00%3A00%3A00Z&end=2020-12-01T17%3A00%3A00Z&status=SOME_STRING_VALUE' \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/charge?start=2020-01-01T00%3A00%3A00Z&end=2020-12-01T17%3A00%3A00Z&status=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/charge?start=2020-01-01T00%3A00%3A00Z&end=2020-12-01T17%3A00%3A00Z&status=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/charge?start=2020-01-01T00%3A00%3A00Z&end=2020-12-01T17%3A00%3A00Z&status=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/charge?start=2020-01-01T00%3A00%3A00Z&end=2020-12-01T17%3A00%3A00Z&status=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/charge?start=2020-01-01T00%3A00%3A00Z&end=2020-12-01T17%3A00%3A00Z&status=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]},"post":{"tags":["charge"],"summary":"Create a new Charge","parameters":[{"in":"query","name":"return_existing","description":"Make the endpoint idempotent, will return an existent charge if already has a one with the correlationID","required":false,"schema":{"type":"boolean"},"examples":{"return_existing":{"value":true}}}],"description":"Endpoint to create a new Charge for a customer","requestBody":{"description":"Data to create a new charge","required":true,"content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/ChargePayload"},"example":{"correlationID":"9134e286-6f71-427a-bf00-241681624586","value":100,"comment":"good","customer":{"name":"Dan","taxID":"31324227036","email":"email0@example.com","phone":"5511999999999"},"additionalInfo":[{"key":"Product","value":"Pencil"},{"key":"Invoice","value":"18476"},{"key":"Order","value":"302"}]}}}},"responses":{"200":{"description":"Charge ID and also the generated Dynamic BR Code to be rendered as a QRCode","content":{"application/json":{"schema":{"type":"object","properties":{"charge":{"$ref":"#/components/schemas/Charge"},"correlationID":{"type":"string"},"brCode":{"type":"string"}},"example":{"charge":{"status":"ACTIVE","customer":{"name":"Dan","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31324227036","type":"BR:CPF"}},"value":100,"comment":"good","correlationID":"9134e286-6f71-427a-bf00-241681624586","paymentLinkID":"7777a23s-6f71-427a-bf00-241681624586","paymentLinkUrl":"https://openpix.com.br/pay/9134e286-6f71-427a-bf00-241681624586","qrCodeImage":"https://api.openpix.dev/openpix/charge/brcode/image/9134e286-6f71-427a-bf00-241681624586.png","expiresIn":2592000,"expiresDate":"2021-04-01T17:28:51.882Z","createdAt":"2021-03-02T17:28:51.882Z","updatedAt":"2021-03-02T17:28:51.882Z","brCode":"000201010212261060014br.gov.bcb.pix2584http://localhost:5001/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao Paulo62360532867ba5173c734202ac659721306b38c963044BCA","additionalInfo":[{"key":"Product","value":"Pencil"},{"key":"Invoice","value":"18476"},{"key":"Order","value":"302"}]}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/charge?return_existing=SOME_BOOLEAN_VALUE\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  correlationID: 'string',\n  value: 0,\n  comment: 'string',\n  identifier: 'string',\n  expiresIn: 0,\n  customer: {name: 'string', email: 'string', phone: 'string', taxID: 'string'},\n  additionalInfo: [{key: 'string', value: 'string'}]\n}));\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url 'https://api.openpix.com.br/api/openpix/v1/charge?return_existing=SOME_BOOLEAN_VALUE' \\\n  --header 'Authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"correlationID\":\"string\",\"value\":0,\"comment\":\"string\",\"identifier\":\"string\",\"expiresIn\":0,\"customer\":{\"name\":\"string\",\"email\":\"string\",\"phone\":\"string\",\"taxID\":\"string\"},\"additionalInfo\":[{\"key\":\"string\",\"value\":\"string\"}]}'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/charge?return_existing=SOME_BOOLEAN_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"correlationID\\\":\\\"string\\\",\\\"value\\\":0,\\\"comment\\\":\\\"string\\\",\\\"identifier\\\":\\\"string\\\",\\\"expiresIn\\\":0,\\\"customer\\\":{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\"},\\\"additionalInfo\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}]}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\npayload = \"{\\\"correlationID\\\":\\\"string\\\",\\\"value\\\":0,\\\"comment\\\":\\\"string\\\",\\\"identifier\\\":\\\"string\\\",\\\"expiresIn\\\":0,\\\"customer\\\":{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\"},\\\"additionalInfo\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/openpix/v1/charge?return_existing=SOME_BOOLEAN_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/charge?return_existing=SOME_BOOLEAN_VALUE\"\n\n\tpayload := strings.NewReader(\"{\\\"correlationID\\\":\\\"string\\\",\\\"value\\\":0,\\\"comment\\\":\\\"string\\\",\\\"identifier\\\":\\\"string\\\",\\\"expiresIn\\\":0,\\\"customer\\\":{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\"},\\\"additionalInfo\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"correlationID\\\":\\\"string\\\",\\\"value\\\":0,\\\"comment\\\":\\\"string\\\",\\\"identifier\\\":\\\"string\\\",\\\"expiresIn\\\":0,\\\"customer\\\":{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\"},\\\"additionalInfo\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/charge?return_existing=SOME_BOOLEAN_VALUE\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/charge?return_existing=SOME_BOOLEAN_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"correlationID\\\":\\\"string\\\",\\\"value\\\":0,\\\"comment\\\":\\\"string\\\",\\\"identifier\\\":\\\"string\\\",\\\"expiresIn\\\":0,\\\"customer\\\":{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\"},\\\"additionalInfo\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}]}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/refund/{id}":{"get":{"tags":["refund"],"summary":"Get one refund","parameters":[{"name":"id","in":"path","description":"refund ID or correlation ID","required":true,"schema":{"type":"string"},"examples":{"id":{"value":"Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA=="},"correlationID":{"value":"fe7834b4060c488a9b0f89811be5f5cf"}}}],"responses":{"200":{"description":"The refund retrieve using the given ID","content":{"application/json":{"schema":{"type":"object","properties":{"refund":{"type":"object","$ref":"#/components/schemas/Refund"}},"example":{"refund":{"value":100,"correlationID":"7777-6f71-427a-bf00-241681624586","refundId":"11bf5b37e0b842e08dcfdc8c4aefc000","returnIdentification":"D09089356202108032000a543e325902"}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/refund/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/openpix/v1/refund/%7Bid%7D \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/refund/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/refund/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/refund/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/refund/%7Bid%7D\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/refund/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/refund":{"get":{"tags":["refund"],"summary":"Get a list of refunds","responses":{"200":{"description":"A list of refunds","content":{"application/json":{"schema":{"type":"object","properties":{"refunds":{"type":"array","items":{"$ref":"#/components/schemas/Refund"}},"pageInfo":{"type":"object","properties":{"errors":{"type":"array","items":{"type":"object","properties":{"message":{"type":"string"},"data":{"type":"object","properties":{"skip":{"type":"number"},"limit":{"type":"number"}}}}}},"skip":{"type":"number"},"limit":{"type":"number"},"totalCount":{"type":"number"},"hasPreviousPage":{"type":"boolean"},"hasNextPage":{"type":"boolean"}}}},"example":{"pageInfo":{"skip":0,"limit":10,"totalCount":20,"hasPreviousPage":false,"hasNextPage":true},"refunds":{"status":"IN_PROCESSING","value":100,"correlationID":"9134e286-6f71-427a-bf00-241681624586","refundId":"9134e2866f71427abf00241681624586","time":"2021-03-02T17:28:51.882Z"}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/refund\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/openpix/v1/refund \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/refund\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/refund\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/refund\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/refund\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/refund\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]},"post":{"tags":["refund"],"summary":"Create a new refund","description":"Endpoint to create a new refund for a customer","requestBody":{"description":"Data to create a new refund","required":true,"content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/RefundPayload"},"example":{"transactionEndToEndId":"9134e286-6f71-427a-bf00-241681624586","correlationID":"9134e286-6f71-427a-bf00-241681624586","value":100}}}},"responses":{"200":{"description":"The created Refund","content":{"application/json":{"schema":{"type":"object","properties":{"refund":{"$ref":"#/components/schemas/Refund"}},"example":{"refund":{"status":"IN_PROCESSING","value":100,"correlationID":"9134e286-6f71-427a-bf00-241681624586","refundId":"9134e2866f71427abf00241681624586","time":"2021-03-02T17:28:51.882Z"}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/refund\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({value: 0, transactionEndToEndId: 'string', correlationID: 'string'}));\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.openpix.com.br/api/openpix/v1/refund \\\n  --header 'Authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"value\":0,\"transactionEndToEndId\":\"string\",\"correlationID\":\"string\"}'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/refund\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"value\\\":0,\\\"transactionEndToEndId\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\npayload = \"{\\\"value\\\":0,\\\"transactionEndToEndId\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/openpix/v1/refund\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/refund\"\n\n\tpayload := strings.NewReader(\"{\\\"value\\\":0,\\\"transactionEndToEndId\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"value\\\":0,\\\"transactionEndToEndId\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/refund\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/refund\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"value\\\":0,\\\"transactionEndToEndId\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/customer/{id}":{"get":{"tags":["customer"],"summary":"Get one customer","parameters":[{"name":"id","in":"path","description":"correlation ID","required":true,"schema":{"type":"string"},"examples":{"correlationID":{"value":"fe7834b4060c488a9b0f89811be5f5cf"}}}],"responses":{"200":{"description":"The customer retrieve using the given ID","content":{"application/json":{"schema":{"type":"object","properties":{"customer":{"type":"object","$ref":"#/components/schemas/Customer"}},"example":{"customer":{"name":"Dan","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31324227036","type":"BR:CPF"},"correlationID":"fe7834b4060c488a9b0f89811be5f5cf"}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/customer/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/openpix/v1/customer/%7Bid%7D \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/customer/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/customer/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/customer/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/customer/%7Bid%7D\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/customer/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/customer":{"get":{"tags":["customer"],"summary":"Get a list of customers","responses":{"200":{"description":"A list of customers","content":{"application/json":{"schema":{"type":"object","properties":{"customers":{"type":"array","items":{"$ref":"#/components/schemas/Customer"}},"pageInfo":{"type":"object","properties":{"errors":{"type":"array","items":{"type":"object","properties":{"message":{"type":"string"},"data":{"type":"object","properties":{"skip":{"type":"number"},"limit":{"type":"number"}}}}}},"skip":{"type":"number"},"limit":{"type":"number"},"totalCount":{"type":"number"},"hasPreviousPage":{"type":"boolean"},"hasNextPage":{"type":"boolean"}}}},"example":{"pageInfo":{"skip":0,"limit":10,"totalCount":20,"hasPreviousPage":false,"hasNextPage":true},"customers":{"customer":{"name":"Dan","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31324227036","type":"BR:CPF"}}}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/customer\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/openpix/v1/customer \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/customer\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/customer\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/customer\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/customer\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/customer\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]},"post":{"tags":["customer"],"summary":"Create a new Customer","description":"Endpoint to create a new Customer","requestBody":{"description":"Data to create a new customer","required":true,"content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/CustomerPayload"},"example":{"name":"Dan","taxID":"31324227036","email":"email0@example.com","phone":"5511999999999","correlationID":"9134e286-6f71-427a-bf00-241681624586"}}}},"responses":{"200":{"description":"Customer ID","content":{"application/json":{"schema":{"type":"object","properties":{"customer":{"$ref":"#/components/schemas/Customer"}},"example":{"customer":{"name":"Dan","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31324227036","type":"BR:CPF"}}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/customer\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  Customer: {\n    name: 'string',\n    email: 'string',\n    phone: 'string',\n    taxID: 'string',\n    correlationID: 'string'\n  }\n}));\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.openpix.com.br/api/openpix/v1/customer \\\n  --header 'Authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"Customer\":{\"name\":\"string\",\"email\":\"string\",\"phone\":\"string\",\"taxID\":\"string\",\"correlationID\":\"string\"}}'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/customer\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"Customer\\\":{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\npayload = \"{\\\"Customer\\\":{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/openpix/v1/customer\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/customer\"\n\n\tpayload := strings.NewReader(\"{\\\"Customer\\\":{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"Customer\\\":{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/customer\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/customer\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"Customer\\\":{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/transaction/{id}":{"get":{"tags":["transactions"],"summary":"Get a Transaction","parameters":[{"name":"id","in":"path","description":"you can use the transaction id from openpix or the endToEndId of transaction from bank","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"The transaction retrieve using the given ID","content":{"application/json":{"schema":{"type":"object","properties":{"transaction":{"type":"object","$ref":"#/components/schemas/Transaction"}}},"example":{"transaction":{"customer":{"name":"Dan","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31324227036","type":"BR:CPF"},"correlationID":"9134e286-6f71-427a-bf00-241681624586"},"payer":{"name":"Dan","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31324227036","type":"BR:CPF"},"correlationID":"9134e286-6f71-427a-bf00-241681624586"},"charge":{"status":"ACTIVE","customer":"603f81fcc6bccc24326ffb43","correlationID":"9134e286-6f71-427a-bf00-241681624586","createdAt":"2021-03-03T12:33:00.546Z","updatedAt":"2021-03-03T12:33:00.546Z"},"withdraw":{"value":100,"time":"2021-03-03T12:33:00.536Z","infoPagador":"payer info 1","endToEndId":"E18236120202012032010s01345689XBY","createdAt":"2021-03-03T12:33:00.546Z"},"infoPagador":"payer info 0","value":100,"time":"2021-03-03T12:33:00.536Z","transactionID":"transactionID","type":"PAYMENT","endToEndId":"E18236120202012032010s0133872GZA","globalID":"UGl4VHJhbnNhY3Rpb246NzE5MWYxYjAyMDQ2YmY1ZjUzZGNmYTBi"}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/transaction/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/openpix/v1/transaction/%7Bid%7D \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/transaction/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/transaction/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/transaction/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/transaction/%7Bid%7D\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/transaction/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/transaction":{"parameters":[{"in":"query","name":"start","schema":{"$ref":"#/components/schemas/Start"}},{"in":"query","name":"end","schema":{"$ref":"#/components/schemas/End"}},{"in":"query","name":"charge","description":"You can use the charge ID or correlation ID or transaction ID of charge to get a list of transactions related of this transaction","schema":{"type":"string"},"example":"Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA"},{"in":"query","name":"pixQrCode","description":"You can use the QrCode static ID or correlation ID or identifier field of QrCode static to get a list of QrCode related of this transaction","schema":{"type":"string"},"example":"Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA"}],"get":{"tags":["transactions"],"summary":"Get a list of transactions","responses":{"200":{"description":"A list of transactions","content":{"application/json":{"schema":{"type":"object","properties":{"status":{"type":"string"},"transactions":{"type":"array","items":{"$ref":"#/components/schemas/Transaction"}},"pageInfo":{"type":"object","properties":{"errors":{"type":"array","items":{"type":"object","properties":{"message":{"type":"string"},"data":{"type":"object","properties":{"skip":{"type":"number"},"limit":{"type":"number"}}}}}},"skip":{"type":"number"},"limit":{"type":"number"},"totalCount":{"type":"number"},"hasPreviousPage":{"type":"boolean"},"hasNextPage":{"type":"boolean"}}}}},"example":{"pageInfo":{"skip":0,"limit":10,"totalCount":20,"hasPreviousPage":false,"hasNextPage":true},"transactions":{"customer":{"name":"Dan","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31324227036","type":"BR:CPF"},"correlationID":"9134e286-6f71-427a-bf00-241681624586"},"payer":{"name":"Dan","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31324227036","type":"BR:CPF"},"correlationID":"9134e286-6f71-427a-bf00-241681624586"},"charge":{"status":"ACTIVE","customer":"603f81fcc6bccc24326ffb43","correlationID":"9134e286-6f71-427a-bf00-241681624586","createdAt":"2021-03-03T12:33:00.546Z","updatedAt":"2021-03-03T12:33:00.546Z"},"withdraw":{"value":100,"time":"2021-03-03T12:33:00.536Z","infoPagador":"payer info 1","endToEndId":"E18236120202012032010s01345689XBY"},"type":"PAYMENT","infoPagador":"payer info 0","value":100,"time":"2021-03-03T12:33:00.536Z","transactionID":"transactionID","endToEndId":"E18236120202012032010s0133872GZA"}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/transaction\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/openpix/v1/transaction \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/transaction\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/transaction\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/transaction\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/transaction\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/transaction\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/webhook/{id}":{"delete":{"tags":["webhook"],"summary":"Delete a Webhook","description":"Endpoint to delete a Webhook","parameters":[{"name":"id","in":"path","description":"webhook ID","required":true,"schema":{"type":"string"},"examples":{"webhookID":{"value":"Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA=="},"id":{"value":"fe7834b4060c488a9b0f89811be5f5cf"}}}],"responses":{"200":{"description":"Webhook ID and also the status code","content":{"application/json":{"schema":{"type":"object","properties":{"status":{"type":"string"}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"},"status":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/webhook/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api.openpix.com.br/api/openpix/v1/webhook/%7Bid%7D \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/webhook/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"DELETE\", \"/api/openpix/v1/webhook/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/webhook/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/webhook/%7Bid%7D\")\n  .delete(null)\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/webhook/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/webhook":{"get":{"parameters":[{"in":"query","name":"url","description":"You can use the url to filter all webhooks","schema":{"type":"string"},"example":"https://mycompany.com.br/webhook"}],"tags":["webhook"],"summary":"Get a list of webhooks","responses":{"200":{"description":"A list of webhooks","content":{"application/json":{"schema":{"type":"object","properties":{"webhooks":{"type":"array","items":{"$ref":"#/components/schemas/Webhook"}},"pageInfo":{"type":"object","properties":{"errors":{"type":"array","items":{"type":"object","properties":{"message":{"type":"string"},"data":{"type":"object","properties":{"skip":{"type":"number"},"limit":{"type":"number"}}}}}}}}},"example":{"pageInfo":{"skip":0,"limit":100,"totalCount":2,"hasPreviousPage":false,"hasNextPage":true},"webhooks":[{"id":"V2ViaG9vazo2MDNlYmUxZWRlYjkzNWU4NmQyMmNmMTg=","name":"webhookName","url":"https://mycompany.com.br/webhook","authorization":"openpix","event":"OPENPIX:TRANSACTION_RECEIVED","isActive":true,"createdAt":"2021-03-02T22:29:10.720Z","updatedAt":"2021-03-02T22:29:10.720Z"},{"id":"V2ViaG9vazo2MDNlYmUxZWRlYjkzNWU4NmQyMmNmOTk=","name":"webhookName","url":"https://mycompany.com.br/webhook","authorization":"openpix","event":"OPENPIX:CHARGE_CREATED","isActive":true,"createdAt":"2021-03-02T22:29:10.720Z","updatedAt":"2021-03-02T22:29:10.720Z"}]}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/webhook?url=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api.openpix.com.br/api/openpix/v1/webhook?url=SOME_STRING_VALUE' \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/webhook?url=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/webhook?url=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/webhook?url=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/webhook?url=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/webhook?url=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]},"post":{"tags":["webhook"],"summary":"Create a new Webhook","description":"Endpoint to create a new Webhook","requestBody":{"description":"Data to create a new webhook","required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"webhook":{"type":"object","$ref":"#/components/schemas/WebhookPayload"}},"example":{"webhook":{"name":"webhookName","event":"OPENPIX:CHARGE_CREATED","url":"https://mycompany.com.br/webhook","authorization":"openpix","isActive":true}}}}}},"responses":{"200":{"description":"Webhook created specific event when receives a new pix transaction","content":{"application/json":{"schema":{"type":"object","properties":{"webhook":{"type":"object","$ref":"#/components/schemas/Webhook"}},"example":{"webhook":{"id":"V2ViaG9vazo2MDNlYmUxZWRlYjkzNWU4NmQyMmNmMTg=","name":"webhookName","url":"https://mycompany.com.br/webhook","authorization":"openpix","isActive":true,"event":"OPENPIX:TRANSACTION_RECEIVED","createdAt":"2021-03-02T22:29:10.720Z","updatedAt":"2021-03-02T22:29:10.720Z"}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"callbacks":{"receivedPix":{"{$request.body#/webhook.url}":{"post":{"description":"Pix - O callback vai ser acionado sempre que um Pix for recebido enviando uma charge e um pix\n","requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"charge":{"type":"object","$ref":"#/components/schemas/Charge"},"pix":{"type":"object","properties":{"pixQrCode":{"type":"object","$ref":"#/components/schemas/PixQrCode"},"charge":{"type":"object","$ref":"#/components/schemas/Charge"},"customer":{"type":"object","$ref":"#/components/schemas/Customer"},"payer":{"type":"object","$ref":"#/components/schemas/Customer"},"time":{"type":"string"},"value":{"type":"string"},"transactionID":{"type":"string"},"infoPagador":{"type":"string"},"raw":{"type":"object","properties":{"endToEndId":{"type":"string"},"txid":{"type":"string"},"valor":{"type":"string"},"horario":{"type":"string"},"infoPagador":{"type":"string"}}}}},"pixQrCode":{"type":"object"}},"example":{"charge":{"status":"COMPLETED","customer":{"name":"Julio","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31928282008","type":"BR:CPF"},"correlationID":"9134e286-6f71-427a-bf00-241681624586"},"correlationID":"9134e286-6f71-427a-bf00-241681624586","transactionID":"9134e2866f71427abf00241681624586","brCode":"000201010212261060014br.gov.bcb.pix2584http://localhost:5001/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao Paulo62360532867ba5173c734202ac659721306b38c963044BCA","createdAt":"2021-03-03T20:49:23.605Z","updatedAt":"2021-03-03T20:49:23.668Z"},"pix":{"pixQrCode":null,"charge":{"status":"COMPLETED","customer":"604002035cce3b60132343cb","correlationID":"9134e286-6f71-427a-bf00-241681624586","brCode":"000201010212261060014br.gov.bcb.pix2584http://localhost:5001/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao Paulo62360532867ba5173c734202ac659721306b38c963044BCA","createdAt":"2021-03-03T21:39:15.831Z","updatedAt":"2021-03-03T21:39:15.896Z"},"customer":{"name":"Julio","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31928282008","type":"BR:CPF"},"correlationID":"9134e286-6f71-427a-bf00-241681624586"},"payer":{"name":"Julio","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31928282008","type":"BR:CPF"},"correlationID":"9134e286-6f71-427a-bf00-241681624586"},"time":"2020-09-09T20:15:00.358Z","value":9999,"transactionID":"9134e2866f71427abf00241681624586","infoPagador":"conta","raw":{"endToEndId":"9134e2866f71427abf00241681624586","txid":"9134e2866f71427abf00241681624586","valor":"99.99","horario":"2020-09-09T20:15:00.358Z","infoPagador":"conta"}},"pixQrCode":null}}}}},"responses":{"200":{"description":"Notificação recebida com sucesso"}}}}},"receivedPixDetached":{"{$request.body#/webhook.url}":{"post":{"description":"Pix Avulso - O callback vai ser acionado sempre que um Pix for recebido devolvendo um pix avulso\n","requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"charge":{"type":"object"},"pix":{"type":"object","properties":{"pixQrCode":{"type":"object","$ref":"#/components/schemas/PixQrCode"},"charge":{"type":"object","$ref":"#/components/schemas/Charge"},"customer":{"type":"object","$ref":"#/components/schemas/Customer"},"payer":{"type":"object","$ref":"#/components/schemas/Customer"},"time":{"type":"string"},"value":{"type":"string"},"transactionID":{"type":"string"},"infoPagador":{"type":"string"},"raw":{"type":"object","properties":{"endToEndId":{"type":"string"},"txid":{"type":"string"},"valor":{"type":"string"},"horario":{"type":"string"},"infoPagador":{"type":"string"}}}}},"pixQrCode":{"type":"object"}},"example":{"charge":null,"pix":{"pixQrCode":null,"charge":null,"customer":null,"time":"2020-09-09T20:15:00.358Z","value":9999,"transactionID":"9134e2866f71427abf00241681624586","infoPagador":"conta","raw":{"endToEndId":"9134e2866f71427abf00241681624586","txid":"9134e2866f71427abf00241681624586","valor":"99.99","horario":"2020-09-09T20:15:00.358Z","infoPagador":"conta"}}}}}}},"responses":{"200":{"description":"Notificação recebida com sucesso"}}}}},"receivedPixQrCode":{"{$request.body#/webhook.url}":{"post":{"description":"Pix QrCode - O callback vai ser acionado sempre que um Pix QrCOde for recebido devolvendo um pix e um pixQrCode\n","requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"charge":{"type":"object"},"pix":{"type":"object","properties":{"pixQrCode":{"type":"object","$ref":"#/components/schemas/PixQrCode"},"charge":{"type":"object","$ref":"#/components/schemas/Charge"},"payer":{"type":"object","$ref":"#/components/schemas/Customer"},"time":{"type":"string"},"value":{"type":"string"},"transactionID":{"type":"string"},"infoPagador":{"type":"string"},"raw":{"type":"object","properties":{"endToEndId":{"type":"string"},"txid":{"type":"string"},"valor":{"type":"string"},"horario":{"type":"string"},"infoPagador":{"type":"string"}}}}},"pixQrCode":{"type":"object","$ref":"#/components/schemas/PixQrCode"}},"example":{"charge":null,"pix":{"pixQrCode":{"value":100,"comment":"good","correlationID":"9134e286-6f71-427a-bf00-241681624586","identifier":"9134e2866f71427abf00241681624586","paymentLinkID":"7777a23s-6f71-427a-bf00-241681624586","paymentLinkUrl":"https://openpix.com.br/pay/9134e286-6f71-427a-bf00-241681624586","qrCodeImage":"https://api.openpix.dev/openpix/pixQrCode/brcode/image/9134e286-6f71-427a-bf00-241681624586.png","createdAt":"2021-03-02T17:28:51.882Z","updatedAt":"2021-03-02T17:28:51.882Z","brCode":"000201010212261060014br.gov.bcb.pix2584http://localhost:5001/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao Paulo62360532867ba5173c734202ac659721306b38c963044BCA"},"customer":null,"time":"2020-09-09T20:15:00.358Z","value":9999,"transactionID":"9134e2866f71427abf00241681624586","infoPagador":"conta","raw":{"endToEndId":"9134e2866f71427abf00241681624586","txid":"9134e2866f71427abf00241681624586","valor":"99.99","horario":"2020-09-09T20:15:00.358Z","infoPagador":"conta"}}}}}}},"responses":{"200":{"description":"Notificação recebida com sucesso"}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/webhook\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  webhook: {\n    name: 'webhookName',\n    event: 'OPENPIX:CHARGE_CREATED',\n    url: 'https://mycompany.com.br/webhook',\n    authorization: 'openpix',\n    isActive: true\n  }\n}));\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.openpix.com.br/api/openpix/v1/webhook \\\n  --header 'Authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"webhook\":{\"name\":\"webhookName\",\"event\":\"OPENPIX:CHARGE_CREATED\",\"url\":\"https://mycompany.com.br/webhook\",\"authorization\":\"openpix\",\"isActive\":true}}'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/webhook\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"webhook\\\":{\\\"name\\\":\\\"webhookName\\\",\\\"event\\\":\\\"OPENPIX:CHARGE_CREATED\\\",\\\"url\\\":\\\"https://mycompany.com.br/webhook\\\",\\\"authorization\\\":\\\"openpix\\\",\\\"isActive\\\":true}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\npayload = \"{\\\"webhook\\\":{\\\"name\\\":\\\"webhookName\\\",\\\"event\\\":\\\"OPENPIX:CHARGE_CREATED\\\",\\\"url\\\":\\\"https://mycompany.com.br/webhook\\\",\\\"authorization\\\":\\\"openpix\\\",\\\"isActive\\\":true}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/openpix/v1/webhook\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/webhook\"\n\n\tpayload := strings.NewReader(\"{\\\"webhook\\\":{\\\"name\\\":\\\"webhookName\\\",\\\"event\\\":\\\"OPENPIX:CHARGE_CREATED\\\",\\\"url\\\":\\\"https://mycompany.com.br/webhook\\\",\\\"authorization\\\":\\\"openpix\\\",\\\"isActive\\\":true}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"webhook\\\":{\\\"name\\\":\\\"webhookName\\\",\\\"event\\\":\\\"OPENPIX:CHARGE_CREATED\\\",\\\"url\\\":\\\"https://mycompany.com.br/webhook\\\",\\\"authorization\\\":\\\"openpix\\\",\\\"isActive\\\":true}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/webhook\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/webhook\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"webhook\\\":{\\\"name\\\":\\\"webhookName\\\",\\\"event\\\":\\\"OPENPIX:CHARGE_CREATED\\\",\\\"url\\\":\\\"https://mycompany.com.br/webhook\\\",\\\"authorization\\\":\\\"openpix\\\",\\\"isActive\\\":true}}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/openpix/charge/brcode/image/{:id}.png?size=1024":{"get":{"tags":["charge"],"summary":"Get an image of Qr Code from a Charge","parameters":[{"in":"path","name":"id","description":"charge link payment ID","required":true,"schema":{"type":"string"},"examples":{"paymentLinkID":{"value":"fe7834b4060c488a9b0f89811be5f5cf"}}},{"in":"query","name":"size","description":"Size for the image. This size should be between 600 and 4096. if the size parameter was not passed, the default value will be 1024.","required":false,"schema":{"type":"string"},"examples":{"size":{"value":768}}}],"responses":{"200":{"description":"The Qr Code image as MIME type"},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/openpix/charge/brcode/image/%7B:id%7D.png?size=1024\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api.openpix.com.br/openpix/charge/brcode/image/%7B:id%7D.png?size=1024' \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/openpix/charge/brcode/image/%7B:id%7D.png?size=1024\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/openpix/charge/brcode/image/%7B:id%7D.png?size=1024\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/openpix/charge/brcode/image/%7B:id%7D.png?size=1024\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/openpix/charge/brcode/image/%7B:id%7D.png?size=1024\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/openpix/charge/brcode/image/%7B:id%7D.png?size=1024\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/pixQrCode-static/{id}":{"get":{"tags":["pixQrCode"],"summary":"Get one Pix QrCode","parameters":[{"name":"id","in":"path","description":"pixQrCode ID, correlation ID or emv identifier","required":true,"schema":{"type":"string"},"examples":{"pixQrCodeId":{"value":"Q2hhcmdlOjYwM2U3NDlhNDI1NjAyYmJiZjRlN2JlZA=="},"correlationID":{"value":"fe7834b4060c488a9b0f89811be5f5cf"},"identifier":{"value":"zr7833b4060c488a9b0f89811"}}}],"responses":{"200":{"description":"The pixQrCode retrieve using the given ID","content":{"application/json":{"schema":{"type":"object","properties":{"pixQrCode":{"type":"object","$ref":"#/components/schemas/PixQrCode"}},"example":{"pixQrCode":{"name":"pix qrcode static","value":100,"comment":"pix qrcode static","correlationID":"fe7834b4060c488a9b0f89811be5f5cf","identifier":"zr7833b4060c488a9b0f89811","paymentLinkID":"7777-6f71-427a-bf00-241681624586","paymentLinkUrl":"https://openpix.com.br/pay/fe7834b4060c488a9b0f89811be5f5cf","qrCodeImage":"https://api.openpix.dev/openpix/charge/brcode/image/fe7834b4060c488a9b0f89811be5f5cf.png","brCode":"000201010212261060014br.gov.bcb.pix2584http://localhost:5001/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao Paulo62360532867ba5173c734202ac659721306b38c963044BCA","createdAt":"2021-03-02T17:28:51.882Z","updatedAt":"2021-03-02T17:28:51.882Z"}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/pixQrCode-static/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/openpix/v1/pixQrCode-static/%7Bid%7D \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/pixQrCode-static/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/pixQrCode-static/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/pixQrCode-static/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/pixQrCode-static/%7Bid%7D\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/pixQrCode-static/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/qrcode-static":{"get":{"tags":["pixQrCode"],"summary":"Get a list of Pix QrCodes","responses":{"200":{"description":"A list of pixQrCodes","content":{"application/json":{"schema":{"type":"object","properties":{"pixQrCodes":{"type":"array","items":{"$ref":"#/components/schemas/PixQrCode"}},"pageInfo":{"type":"object","properties":{"errors":{"type":"array","items":{"type":"object","properties":{"message":{"type":"string"},"data":{"type":"object","properties":{"skip":{"type":"number"},"limit":{"type":"number"}}}}}},"skip":{"type":"number"},"limit":{"type":"number"},"totalCount":{"type":"number"},"hasPreviousPage":{"type":"boolean"},"hasNextPage":{"type":"boolean"}}}},"example":{"pageInfo":{"skip":0,"limit":10,"totalCount":20,"hasPreviousPage":false,"hasNextPage":true},"pixQrCodes":{"name":"pix qrcode","value":100,"comment":"good","correlationID":"9134e286-6f71-427a-bf00-241681624586","identifier":"zr7833b4060c488a9b0f89811","paymentLinkID":"7777a23s-6f71-427a-bf00-241681624586","paymentLinkUrl":"https://openpix.com.br/pay/9134e286-6f71-427a-bf00-241681624586","qrCodeImage":"https://api.openpix.dev/openpix/pixQrCode/brcode/image/9134e286-6f71-427a-bf00-241681624586.png","brCode":"000201010212261060014br.gov.bcb.pix2584http://localhost:5001/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao Paulo62360532867ba5173c734202ac659721306b38c963044BCA","createdAt":"2021-03-02T17:28:51.882Z","updatedAt":"2021-03-02T17:28:51.882Z"}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/qrcode-static\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/openpix/v1/qrcode-static \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/qrcode-static\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/qrcode-static\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/qrcode-static\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/qrcode-static\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/qrcode-static\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]},"post":{"tags":["pixQrCode"],"summary":"Create a new Pix QrCode Static","description":"Endpoint to create a new Pix QrCode Static","requestBody":{"description":"Data to create a new Pix QrCode Static","required":true,"content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/PixQrCodePayload"},"example":{"correlationID":"9134e286-6f71-427a-bf00-241681624586","value":100,"comment":"good","identifier":"zr7833b4060c488a9b0f89811"}}}},"responses":{"200":{"description":"PixQrCode ID and also the generated Dynamic BR Code to be rendered as a QRCode","content":{"application/json":{"schema":{"type":"object","properties":{"pixQrCode":{"$ref":"#/components/schemas/PixQrCode"},"correlationID":{"type":"string"},"brCode":{"type":"string"}},"example":{"pixQrCode":{"value":100,"comment":"good","correlationID":"9134e286-6f71-427a-bf00-241681624586","identifier":"zr7833b4060c488a9b0f89811","paymentLinkID":"7777a23s-6f71-427a-bf00-241681624586","paymentLinkUrl":"https://openpix.com.br/pay/9134e286-6f71-427a-bf00-241681624586","qrCodeImage":"https://api.openpix.dev/openpix/pixQrCode/brcode/image/9134e286-6f71-427a-bf00-241681624586.png","createdAt":"2021-03-02T17:28:51.882Z","updatedAt":"2021-03-02T17:28:51.882Z","brCode":"000201010212261060014br.gov.bcb.pix2584http://localhost:5001/openpix/testing?transactionID=867ba5173c734202ac659721306b38c952040000530398654040.015802BR5909LOCALHOST6009Sao Paulo62360532867ba5173c734202ac659721306b38c963044BCA"}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/qrcode-static\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'string',\n  correlationID: 'string',\n  value: 0,\n  comment: 'string',\n  identifier: 'string'\n}));\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.openpix.com.br/api/openpix/v1/qrcode-static \\\n  --header 'Authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"correlationID\":\"string\",\"value\":0,\"comment\":\"string\",\"identifier\":\"string\"}'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/qrcode-static\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\",\\\"value\\\":0,\\\"comment\\\":\\\"string\\\",\\\"identifier\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\",\\\"value\\\":0,\\\"comment\\\":\\\"string\\\",\\\"identifier\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/openpix/v1/qrcode-static\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/qrcode-static\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\",\\\"value\\\":0,\\\"comment\\\":\\\"string\\\",\\\"identifier\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"name\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\",\\\"value\\\":0,\\\"comment\\\":\\\"string\\\",\\\"identifier\\\":\\\"string\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/qrcode-static\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/qrcode-static\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\",\\\"value\\\":0,\\\"comment\\\":\\\"string\\\",\\\"identifier\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/pay/confirm":{"post":{"tags":["payment"],"summary":"Confirm a Payment","description":"Endpoint to confirm a payment","requestBody":{"description":"Data to confirm a pending payment","required":true,"content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/PayConfirmPayload"},"example":{"correlationID":"pay1"}}}},"responses":{"200":{"description":"Payment destination account information","content":{"application/json":{"schema":{"type":"object","properties":{"payment":{"$ref":"#/components/schemas/PayConfirmPayment"}},"example":{"payment":{"correlationID":"9134e286-6f71-427a-bf00-241681624586","destination":{"value":100,"status":"CONFIRMED","pixKey":"c4249323-b4ca-43f2-8139-8232aab09b93","pixKeyType":"RANDOM","account":{"branch":"1234","account":"12345","accountType":"ContaCorrente"},"psp":{"id":"1234","name":"Banco de Exemplo","code":"555"},"holder":{"name":"Pessoa Juridica","taxID":{"taxID":"1234567890","type":"CNPJ"}}}}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/pay/confirm\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({correlationID: 'string'}));\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.openpix.com.br/api/openpix/v1/pay/confirm \\\n  --header 'Authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"correlationID\":\"string\"}'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/pay/confirm\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"correlationID\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\npayload = \"{\\\"correlationID\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/openpix/v1/pay/confirm\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/pay/confirm\"\n\n\tpayload := strings.NewReader(\"{\\\"correlationID\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"correlationID\\\":\\\"string\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/pay/confirm\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/pay/confirm\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"correlationID\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/pay/pix-key":{"post":{"tags":["payment"],"summary":"Init a payment using a Pix Key","description":"Endpoint to init a payment using a Pix Key","requestBody":{"description":"Data to create new payment","required":true,"content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/PayPixKeyPayload"},"example":{"pixKey":"c4249323-b4ca-43f2-8139-784baab09b93","pixKeyType":"RANDOM","value":1,"correlationID":"pay1"}}}},"responses":{"200":{"description":"Payment destination account information","content":{"application/json":{"schema":{"type":"object","properties":{"payment":{"$ref":"#/components/schemas/PaymentPixKey"}},"example":{"payment":{"correlationID":"9134e286-6f71-427a-bf00-241681624586","value":100,"status":"PENDING","destination":{"pixKey":"c4249323-b4ca-43f2-8139-8232aab09b93","pixKeyType":"RANDOM","account":{"branch":"1234","account":"12345","accountType":"ContaCorrente"},"psp":{"id":"1234","name":"Banco de Exemplo","code":"555"},"holder":{"name":"Pessoa Juridica","taxID":{"taxID":"1234567890","type":"CNPJ"}}}}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/pay/pix-key\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({correlationID: 'string', pixKey: 'string', pixKeyType: 'CPF', value: 0}));\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.openpix.com.br/api/openpix/v1/pay/pix-key \\\n  --header 'Authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"correlationID\":\"string\",\"pixKey\":\"string\",\"pixKeyType\":\"CPF\",\"value\":0}'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/pay/pix-key\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"correlationID\\\":\\\"string\\\",\\\"pixKey\\\":\\\"string\\\",\\\"pixKeyType\\\":\\\"CPF\\\",\\\"value\\\":0}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\npayload = \"{\\\"correlationID\\\":\\\"string\\\",\\\"pixKey\\\":\\\"string\\\",\\\"pixKeyType\\\":\\\"CPF\\\",\\\"value\\\":0}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/openpix/v1/pay/pix-key\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/pay/pix-key\"\n\n\tpayload := strings.NewReader(\"{\\\"correlationID\\\":\\\"string\\\",\\\"pixKey\\\":\\\"string\\\",\\\"pixKeyType\\\":\\\"CPF\\\",\\\"value\\\":0}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"correlationID\\\":\\\"string\\\",\\\"pixKey\\\":\\\"string\\\",\\\"pixKeyType\\\":\\\"CPF\\\",\\\"value\\\":0}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/pay/pix-key\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/pay/pix-key\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"correlationID\\\":\\\"string\\\",\\\"pixKey\\\":\\\"string\\\",\\\"pixKeyType\\\":\\\"CPF\\\",\\\"value\\\":0}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/pay/qrcode":{"post":{"tags":["payment"],"summary":"Init a payment using a QRCode","description":"Endpoint to init a payment using a QRCode","requestBody":{"description":"Data to create new payment","required":true,"content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/PayQRCodeload"},"example":{"qrcode":"00020126580014br.gov.bcb.pix01365fd0bae1-ccf3-4675-a189-c9eaee189bc65204000053039865406100.005802BR5909LOCALHOST6009Sao Paulo62100506doe10063042F24","correlationID":"pay1"}}}},"responses":{"200":{"description":"Payment destination account information","content":{"application/json":{"schema":{"type":"object","properties":{"payment":{"$ref":"#/components/schemas/PaymentPixKey"}},"example":{"payment":{"correlationID":"9134e286-6f71-427a-bf00-241681624586","destination":{"value":100,"status":"PENDING","pixKey":"c4249323-b4ca-43f2-8139-8232aab09b93","pixKeyType":"RANDOM","account":{"branch":"1234","account":"12345","accountType":"ContaCorrente"},"psp":{"id":"1234","name":"Banco de Exemplo","code":"555"},"holder":{"name":"Pessoa Juridica","taxID":{"taxID":"1234567890","type":"CNPJ"}}}}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/pay/qrcode\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({correlationID: 'string', qrcode: 'string', value: 0}));\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.openpix.com.br/api/openpix/v1/pay/qrcode \\\n  --header 'Authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"correlationID\":\"string\",\"qrcode\":\"string\",\"value\":0}'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/pay/qrcode\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"correlationID\\\":\\\"string\\\",\\\"qrcode\\\":\\\"string\\\",\\\"value\\\":0}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\npayload = \"{\\\"correlationID\\\":\\\"string\\\",\\\"qrcode\\\":\\\"string\\\",\\\"value\\\":0}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/openpix/v1/pay/qrcode\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/pay/qrcode\"\n\n\tpayload := strings.NewReader(\"{\\\"correlationID\\\":\\\"string\\\",\\\"qrcode\\\":\\\"string\\\",\\\"value\\\":0}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"correlationID\\\":\\\"string\\\",\\\"qrcode\\\":\\\"string\\\",\\\"value\\\":0}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/pay/qrcode\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/pay/qrcode\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"correlationID\\\":\\\"string\\\",\\\"qrcode\\\":\\\"string\\\",\\\"value\\\":0}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/giftback/balance/{taxID}":{"get":{"tags":["giftback"],"summary":"Get Giftback balance of a Customer","description":"Endpoint to get Giftback balance of a Customer","parameters":[{"name":"taxID","in":"path","description":"CPF of the Customer","required":true,"schema":{"type":"string"},"example":"3132422703"}],"responses":{"200":{"description":"Customer information and balance in cents","content":{"application/json":{"schema":{"type":"object","properties":{"customer":{"type":"object","$ref":"#/components/schemas/Customer"},"balance":{"type":"number"}},"example":{"customer":{"name":"Dan","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31324227036","type":"BR:CPF"},"correlationID":"fe7834b4060c488a9b0f89811be5f5cf"},"balance":3400}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/giftback/balance/3132422703\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/openpix/v1/giftback/balance/3132422703 \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/giftback/balance/3132422703\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/giftback/balance/3132422703\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/giftback/balance/3132422703\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/giftback/balance/3132422703\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/giftback/balance/3132422703\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/giftback":{"post":{"tags":["giftback"],"summary":"Give Giftback to a Customer","description":"Endpoint to give Giftback to a Customer","requestBody":{"description":"Data to give Giftback to a Customer","required":true,"content":{"application/json":{"schema":{"type":"object","required":["taxID","value"],"properties":{"taxID":{"type":"string","description":"CPF of the Customer"},"value":{"type":"string","description":"Value in cents of this Giftback"}},"example":{"taxID":"31324227036","value":100}}}}},"responses":{"200":{"description":"Customer information and balance in cents","content":{"application/json":{"schema":{"type":"object","properties":{"customer":{"type":"object","$ref":"#/components/schemas/Customer"},"balance":{"type":"number"}},"example":{"customer":{"name":"Dan","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31324227036","type":"BR:CPF"},"correlationID":"fe7834b4060c488a9b0f89811be5f5cf"},"balance":3400}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/giftback\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({taxID: '31324227036', value: 100}));\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.openpix.com.br/api/openpix/v1/giftback \\\n  --header 'Authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"taxID\":\"31324227036\",\"value\":100}'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/giftback\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"taxID\\\":\\\"31324227036\\\",\\\"value\\\":100}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\npayload = \"{\\\"taxID\\\":\\\"31324227036\\\",\\\"value\\\":100}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/openpix/v1/giftback\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/giftback\"\n\n\tpayload := strings.NewReader(\"{\\\"taxID\\\":\\\"31324227036\\\",\\\"value\\\":100}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"taxID\\\":\\\"31324227036\\\",\\\"value\\\":100}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/giftback\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/giftback\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"taxID\\\":\\\"31324227036\\\",\\\"value\\\":100}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/common/user/v1/users/{id}":{"delete":{"tags":["users"],"summary":"Delete one user","parameters":[{"name":"id","in":"path","description":"platform ID","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"The user was deleted successfully","content":{"application/json":{"schema":{"type":"object","properties":{"status":{"type":"string"},"user":{"type":"string","description":"user ID that was deleted"}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"status":{"type":"string"},"message":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/common/user/v1/users/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api.openpix.com.br/api/common/user/v1/users/%7Bid%7D \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/common/user/v1/users/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"DELETE\", \"/api/common/user/v1/users/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/common/user/v1/users/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/common/user/v1/users/%7Bid%7D\")\n  .delete(null)\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/common/user/v1/users/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]},"get":{"tags":["users"],"summary":"Get one user","parameters":[{"name":"id","in":"path","description":"platform ID or email or correlation ID","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"The user retrieve using the given ID","content":{"application/json":{"schema":{"type":"object","properties":{"status":{"type":"string"},"user":{"type":"object","$ref":"#/components/schemas/User"}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"status":{"type":"string"},"message":{"type":"string"},"user":{"type":"object","$ref":"#/components/schemas/User"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/common/user/v1/users/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/common/user/v1/users/%7Bid%7D \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/common/user/v1/users/%7Bid%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/common/user/v1/users/%7Bid%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/common/user/v1/users/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/common/user/v1/users/%7Bid%7D\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/common/user/v1/users/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/common/user/v1/users":{"get":{"tags":["users"],"summary":"Get a list of users","responses":{"200":{"description":"A list of users","content":{"application/json":{"schema":{"type":"object","properties":{"status":{"type":"string"},"users":{"type":"array","items":{"$ref":"#/components/schemas/User"}},"pageInfo":{"type":"object","properties":{"errors":{"type":"array","items":{"type":"object","properties":{"message":{"type":"string"},"data":{"type":"object","properties":{"skip":{"type":"number"},"limit":{"type":"number"}}}}}},"skip":{"type":"number"},"limit":{"type":"number"},"totalCount":{"type":"number"},"hasPreviousPage":{"type":"boolean"},"hasNextPage":{"type":"boolean"}}}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"status":{"type":"string"},"message":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/common/user/v1/users\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/common/user/v1/users \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/common/user/v1/users\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/common/user/v1/users\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/common/user/v1/users\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/common/user/v1/users\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/common/user/v1/users\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/common/user/v1/update-or-create":{"post":{"tags":["users"],"summary":"Create or Update multiple users","description":"Endpoint to create or update multiple users","requestBody":{"description":"Data to create or update users","required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"users":{"type":"array","items":{"$ref":"#/components/schemas/UserPayload"}}}}}}},"responses":{"200":{"description":"A list of all users created/updated and possible errors","content":{"application/json":{"schema":{"type":"object","properties":{"status":{"type":"string"},"message":{"type":"string"},"errors":{"type":"array","items":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/UserPayload"},"message":{"type":"string"}}}},"data":{"type":"array","items":{"$ref":"#/components/schemas/User"}}}}}}},"400":{"description":"An error message of missing users","content":{"application/json":{"schema":{"type":"object","properties":{"status":{"type":"string"},"message":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/common/user/v1/update-or-create\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  users: [\n    {\n      id: 'string',\n      emails: ['string'],\n      taxID: 'string',\n      name: 'string',\n      nick: 'string',\n      gender: 'string',\n      tags: 'string',\n      correlationID: 'string',\n      manager: 'string',\n      area: 'string',\n      phoneNumbers: ['string'],\n      birthDate: '2019-08-24',\n      admissionDate: '2019-08-24',\n      demissionDate: '2019-08-24',\n      password: 'string'\n    }\n  ]\n}));\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.openpix.com.br/api/common/user/v1/update-or-create \\\n  --header 'Authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"users\":[{\"id\":\"string\",\"emails\":[\"string\"],\"taxID\":\"string\",\"name\":\"string\",\"nick\":\"string\",\"gender\":\"string\",\"tags\":\"string\",\"correlationID\":\"string\",\"manager\":\"string\",\"area\":\"string\",\"phoneNumbers\":[\"string\"],\"birthDate\":\"2019-08-24\",\"admissionDate\":\"2019-08-24\",\"demissionDate\":\"2019-08-24\",\"password\":\"string\"}]}'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/common/user/v1/update-or-create\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"users\\\":[{\\\"id\\\":\\\"string\\\",\\\"emails\\\":[\\\"string\\\"],\\\"taxID\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"nick\\\":\\\"string\\\",\\\"gender\\\":\\\"string\\\",\\\"tags\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\",\\\"manager\\\":\\\"string\\\",\\\"area\\\":\\\"string\\\",\\\"phoneNumbers\\\":[\\\"string\\\"],\\\"birthDate\\\":\\\"2019-08-24\\\",\\\"admissionDate\\\":\\\"2019-08-24\\\",\\\"demissionDate\\\":\\\"2019-08-24\\\",\\\"password\\\":\\\"string\\\"}]}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\npayload = \"{\\\"users\\\":[{\\\"id\\\":\\\"string\\\",\\\"emails\\\":[\\\"string\\\"],\\\"taxID\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"nick\\\":\\\"string\\\",\\\"gender\\\":\\\"string\\\",\\\"tags\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\",\\\"manager\\\":\\\"string\\\",\\\"area\\\":\\\"string\\\",\\\"phoneNumbers\\\":[\\\"string\\\"],\\\"birthDate\\\":\\\"2019-08-24\\\",\\\"admissionDate\\\":\\\"2019-08-24\\\",\\\"demissionDate\\\":\\\"2019-08-24\\\",\\\"password\\\":\\\"string\\\"}]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/common/user/v1/update-or-create\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/common/user/v1/update-or-create\"\n\n\tpayload := strings.NewReader(\"{\\\"users\\\":[{\\\"id\\\":\\\"string\\\",\\\"emails\\\":[\\\"string\\\"],\\\"taxID\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"nick\\\":\\\"string\\\",\\\"gender\\\":\\\"string\\\",\\\"tags\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\",\\\"manager\\\":\\\"string\\\",\\\"area\\\":\\\"string\\\",\\\"phoneNumbers\\\":[\\\"string\\\"],\\\"birthDate\\\":\\\"2019-08-24\\\",\\\"admissionDate\\\":\\\"2019-08-24\\\",\\\"demissionDate\\\":\\\"2019-08-24\\\",\\\"password\\\":\\\"string\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"users\\\":[{\\\"id\\\":\\\"string\\\",\\\"emails\\\":[\\\"string\\\"],\\\"taxID\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"nick\\\":\\\"string\\\",\\\"gender\\\":\\\"string\\\",\\\"tags\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\",\\\"manager\\\":\\\"string\\\",\\\"area\\\":\\\"string\\\",\\\"phoneNumbers\\\":[\\\"string\\\"],\\\"birthDate\\\":\\\"2019-08-24\\\",\\\"admissionDate\\\":\\\"2019-08-24\\\",\\\"demissionDate\\\":\\\"2019-08-24\\\",\\\"password\\\":\\\"string\\\"}]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/common/user/v1/update-or-create\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/common/user/v1/update-or-create\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"users\\\":[{\\\"id\\\":\\\"string\\\",\\\"emails\\\":[\\\"string\\\"],\\\"taxID\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"nick\\\":\\\"string\\\",\\\"gender\\\":\\\"string\\\",\\\"tags\\\":\\\"string\\\",\\\"correlationID\\\":\\\"string\\\",\\\"manager\\\":\\\"string\\\",\\\"area\\\":\\\"string\\\",\\\"phoneNumbers\\\":[\\\"string\\\"],\\\"birthDate\\\":\\\"2019-08-24\\\",\\\"admissionDate\\\":\\\"2019-08-24\\\",\\\"demissionDate\\\":\\\"2019-08-24\\\",\\\"password\\\":\\\"string\\\"}]}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/partner/application":{"post":{"tags":["partner (request access)"],"summary":"Create a new application to some of your preregistration's company.","description":"As a partner company, you can create a new application to some of your companies.\nThe application should give access to our API to this companies, so they can use\nit too.\n","requestBody":{"description":"The request body to create a pre registration.","required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"application":{"type":"object","properties":{"name":{"type":"string","description":"The name you want to give your application"},"type":{"$ref":"#/components/schemas/ApplicationEnumTypePayload"}},"required":["name","type"]},"taxID":{"$ref":"#/components/schemas/TaxIDObjectPayload","required":["taxID","type"]}}},"example":{"application":{"name":"MyAPIAccess","type":"API"},"taxID":{"taxID":"65914571000187","type":"BR:CNPJ"}}}}},"responses":{"200":{"description":"Our \"idempotence output\", if you get this HTTP code, it's an application\nthat already has been registered.\n","content":{"application/json":{"schema":{"type":"object","properties":{"application":{"$ref":"#/components/schemas/PartnerApplicationPayload"}}}}}},"201":{"description":"A new application has been registered. It'll be identified by the name that you give to it\nand by the company that has been referenced.\n","content":{"application/json":{"schema":{"type":"object","properties":{"application":{"$ref":"#/components/schemas/PartnerApplicationPayload"}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}},"403":{"description":"You are unauthorized to use this endpoint.","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/partner/application\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  application: {name: 'string', type: 'API'},\n  taxID: {taxID: 'string', type: 'BR:CNPJ'}\n}));\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.openpix.com.br/api/openpix/v1/partner/application \\\n  --header 'Authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"application\":{\"name\":\"string\",\"type\":\"API\"},\"taxID\":{\"taxID\":\"string\",\"type\":\"BR:CNPJ\"}}'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/partner/application\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"application\\\":{\\\"name\\\":\\\"string\\\",\\\"type\\\":\\\"API\\\"},\\\"taxID\\\":{\\\"taxID\\\":\\\"string\\\",\\\"type\\\":\\\"BR:CNPJ\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\npayload = \"{\\\"application\\\":{\\\"name\\\":\\\"string\\\",\\\"type\\\":\\\"API\\\"},\\\"taxID\\\":{\\\"taxID\\\":\\\"string\\\",\\\"type\\\":\\\"BR:CNPJ\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/openpix/v1/partner/application\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/partner/application\"\n\n\tpayload := strings.NewReader(\"{\\\"application\\\":{\\\"name\\\":\\\"string\\\",\\\"type\\\":\\\"API\\\"},\\\"taxID\\\":{\\\"taxID\\\":\\\"string\\\",\\\"type\\\":\\\"BR:CNPJ\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"application\\\":{\\\"name\\\":\\\"string\\\",\\\"type\\\":\\\"API\\\"},\\\"taxID\\\":{\\\"taxID\\\":\\\"string\\\",\\\"type\\\":\\\"BR:CNPJ\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/partner/application\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/partner/application\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"application\\\":{\\\"name\\\":\\\"string\\\",\\\"type\\\":\\\"API\\\"},\\\"taxID\\\":{\\\"taxID\\\":\\\"string\\\",\\\"type\\\":\\\"BR:CNPJ\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/partner/company/{taxID}":{"get":{"tags":["partner (request access)"],"summary":"Get an specific preregistration via taxID param.","parameters":[{"name":"taxID","in":"path","description":"The raw tax ID from the preregistration that you want to get.","required":true,"schema":{"type":"string"},"examples":{"taxID":{"value":"60151449000182"}}}],"responses":{"200":{"description":"The preregistration retrieved by the tax ID.","content":{"application/json":{"schema":{"type":"object","properties":{"preRegistration":{"type":"object","properties":{"preRegistration":{"$ref":"#/components/schemas/PreRegistrationObjectPayload"},"user":{"$ref":"#/components/schemas/PreRegistrationUserObject"},"company":{"$ref":"#/components/schemas/CompanyObjectPayload"},"account":{"$ref":"#/components/schemas/AccountObjectPayload"}},"required":["preRegistration","user"]}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/partner/company/%7BtaxID%7D\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/openpix/v1/partner/company/%7BtaxID%7D \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/partner/company/%7BtaxID%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/partner/company/%7BtaxID%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/partner/company/%7BtaxID%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/partner/company/%7BtaxID%7D\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/partner/company/%7BtaxID%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/partner/company":{"get":{"tags":["partner (request access)"],"summary":"Get every preregistration that is managed by you.","responses":{"200":{"description":"A list with preregistrations.","content":{"application/json":{"schema":{"type":"object","properties":{"preRegistrations":{"type":"array","items":{"type":"object","properties":{"preRegistration":{"$ref":"#/components/schemas/PreRegistrationObjectPayload"},"user":{"$ref":"#/components/schemas/PreRegistrationUserObject"},"company":{"$ref":"#/components/schemas/CompanyObjectPayload"},"account":{"$ref":"#/components/schemas/AccountObjectPayload"}},"required":["preRegistration","user"]}},"pageInfo":{"type":"object","properties":{"errors":{"type":"array","items":{"type":"object","properties":{"message":{"type":"string"},"data":{"type":"object","properties":{"skip":{"type":"number"},"limit":{"type":"number"}}}}}},"skip":{"type":"number"},"limit":{"type":"number"},"totalCount":{"type":"number"},"hasPreviousPage":{"type":"boolean"},"hasNextPage":{"type":"boolean"}}}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/partner/company\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/openpix/v1/partner/company \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/partner/company\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/partner/company\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/partner/company\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/partner/company\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/partner/company\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]},"post":{"tags":["partner (request access)"],"summary":"Create a pre registration with a partner reference (your company)","description":"As a partner company, you can create a new pre registration referencing your\ncompany as a partner.\n","requestBody":{"description":"The request body to create a pre registration.","required":true,"content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/PreRegistrationPayloadObject"},"example":{"preRegistration":{"name":"Example LLC","taxID":{"taxID":"11111111111111","type":"BR:CNPJ"},"website":"examplellc.com"},"user":{"firstName":"John","lastName":"Doe","email":"johndoe@examplellc.com","phone":"+5511912345678"}}}}},"responses":{"200":{"description":"Payload with a pre registration data.\nBeing the taxID our idempotence key, if you do the request with the same taxID multiple times,\nevery time you'll receive the same data from our endpoint.\n","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PreRegistrationPayloadObject"}}}},"201":{"description":"A new preregistration that is related to you has been created.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PreRegistrationPayloadObject"}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}},"403":{"description":"You are unauthorized to use this endpoint.","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/partner/company\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  preRegistration: {name: 'string', website: 'string', taxID: {taxID: 'string', type: 'BR:CNPJ'}},\n  user: {firstName: 'string', lastName: 'string', email: 'string', phone: 'string'}\n}));\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.openpix.com.br/api/openpix/v1/partner/company \\\n  --header 'Authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"preRegistration\":{\"name\":\"string\",\"website\":\"string\",\"taxID\":{\"taxID\":\"string\",\"type\":\"BR:CNPJ\"}},\"user\":{\"firstName\":\"string\",\"lastName\":\"string\",\"email\":\"string\",\"phone\":\"string\"}}'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/partner/company\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"preRegistration\\\":{\\\"name\\\":\\\"string\\\",\\\"website\\\":\\\"string\\\",\\\"taxID\\\":{\\\"taxID\\\":\\\"string\\\",\\\"type\\\":\\\"BR:CNPJ\\\"}},\\\"user\\\":{\\\"firstName\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\npayload = \"{\\\"preRegistration\\\":{\\\"name\\\":\\\"string\\\",\\\"website\\\":\\\"string\\\",\\\"taxID\\\":{\\\"taxID\\\":\\\"string\\\",\\\"type\\\":\\\"BR:CNPJ\\\"}},\\\"user\\\":{\\\"firstName\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/openpix/v1/partner/company\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/partner/company\"\n\n\tpayload := strings.NewReader(\"{\\\"preRegistration\\\":{\\\"name\\\":\\\"string\\\",\\\"website\\\":\\\"string\\\",\\\"taxID\\\":{\\\"taxID\\\":\\\"string\\\",\\\"type\\\":\\\"BR:CNPJ\\\"}},\\\"user\\\":{\\\"firstName\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"preRegistration\\\":{\\\"name\\\":\\\"string\\\",\\\"website\\\":\\\"string\\\",\\\"taxID\\\":{\\\"taxID\\\":\\\"string\\\",\\\"type\\\":\\\"BR:CNPJ\\\"}},\\\"user\\\":{\\\"firstName\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/partner/company\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/partner/company\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"preRegistration\\\":{\\\"name\\\":\\\"string\\\",\\\"website\\\":\\\"string\\\",\\\"taxID\\\":{\\\"taxID\\\":\\\"string\\\",\\\"type\\\":\\\"BR:CNPJ\\\"}},\\\"user\\\":{\\\"firstName\\\":\\\"string\\\",\\\"lastName\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/account/{accountId}":{"get":{"tags":["account"],"summary":"Get an Account","parameters":[{"name":"accountId","in":"path","description":"ID of the Account","required":true,"schema":{"type":"string"},"example":"6290ccfd42831958a405debc"}],"responses":{"200":{"description":"The Account retrieve using the given Account ID","content":{"application/json":{"schema":{"type":"object","properties":{"account":{"type":"object","$ref":"#/components/schemas/CompanyBankAccount"}}},"example":{"account":{"accountId":"6290ccfd42831958a405debc","isDefault":true,"balance":{"total":129430,"blocked":0,"available":129430}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/account/6290ccfd42831958a405debc\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/openpix/v1/account/6290ccfd42831958a405debc \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/account/6290ccfd42831958a405debc\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/account/6290ccfd42831958a405debc\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/account/6290ccfd42831958a405debc\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/account/6290ccfd42831958a405debc\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/account/6290ccfd42831958a405debc\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/account/":{"get":{"tags":["account"],"summary":"Get a list of Accounts","responses":{"200":{"description":"A list of Accounts","content":{"application/json":{"schema":{"type":"object","properties":{"accounts":{"type":"array","items":{"$ref":"#/components/schemas/CompanyBankAccount"}}}},"example":{"accounts":[{"accountId":"6290ccfd42831958a405debc","isDefault":true,"balance":{"total":129430,"blocked":0,"available":129430}},{"accountId":"6286b467a7910113577e00ce","isDefault":false,"balance":{"total":130,"blocked":100,"available":30}}]}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/account/\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/openpix/v1/account/ \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/account/\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/openpix/v1/account/\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/account/\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/account/\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/account/\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/openpix/v1/account/{accountId}/withdraw":{"post":{"tags":["account"],"summary":"Withdraw from an Account","description":"An additional fee may be charged depending on the minimum free withdrawal amount. See more about at https://developers.openpix.com.br/docs/FAQ/faq-virtual-account/#onde-posso-consultar-as-taxas-da-minha-conta-virtual","parameters":[{"name":"accountId","in":"path","description":"ID of the Account","required":true,"schema":{"type":"string"},"example":"6290ccfd42831958a405debc"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"value":{"type":"number","description":"Value in cents"}}},"example":{"value":7000}}}},"responses":{"200":{"description":"Withdraw and Acccount information","content":{"application/json":{"schema":{"type":"object","properties":{"withdraw":{"type":"object","properties":{"account":{"type":"object","$ref":"#/components/schemas/CompanyBankAccount"},"transaction":{"type":"object","$ref":"#/components/schemas/WithdrawTransaction"}}}}},"example":{"withdraw":{"account":{"accountId":"6290ccfd42831958a405debc","isDefault":true,"balance":{"total":122430,"blocked":0,"available":122430}},"transaction":{"endToEndId":"E23114447202205191817cx6VMrbwtw6","transaction":7000}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/openpix/v1/account/6290ccfd42831958a405debc/withdraw\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({value: 0}));\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.openpix.com.br/api/openpix/v1/account/6290ccfd42831958a405debc/withdraw \\\n  --header 'Authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"value\":0}'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/openpix/v1/account/6290ccfd42831958a405debc/withdraw\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"value\\\":0}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\npayload = \"{\\\"value\\\":0}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/openpix/v1/account/6290ccfd42831958a405debc/withdraw\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/openpix/v1/account/6290ccfd42831958a405debc/withdraw\"\n\n\tpayload := strings.NewReader(\"{\\\"value\\\":0}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"value\\\":0}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/openpix/v1/account/6290ccfd42831958a405debc/withdraw\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/openpix/v1/account/6290ccfd42831958a405debc/withdraw\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"value\\\":0}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/v1/subscriptions/{id}":{"get":{"tags":["subscription"],"summary":"Get one subscription","parameters":[{"name":"id","in":"path","description":"The globalID of the subscription.","required":true,"schema":{"type":"string"},"example":"UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM="}],"responses":{"200":{"description":"The subscription retrieved using the given ID","content":{"application/json":{"schema":{"type":"object","properties":{"subscription":{"type":"object","$ref":"#/components/schemas/Subscription"}},"example":{"subscription":{"globalID":"UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=","customer":{"name":"Dan","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31324227036","type":"BR:CPF"}},"value":100}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/v1/subscriptions/UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=\",\n  \"headers\": {\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.openpix.com.br/api/v1/subscriptions/UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM= \\\n  --header 'Authorization: REPLACE_KEY_VALUE'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/v1/subscriptions/UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\nheaders = { 'Authorization': \"REPLACE_KEY_VALUE\" }\n\nconn.request(\"GET\", \"/api/v1/subscriptions/UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/v1/subscriptions/UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/v1/subscriptions/UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=\")\n  .get()\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/v1/subscriptions/UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/v1/subscriptions":{"post":{"tags":["subscription"],"summary":"Create a new Subscription","description":"Endpoint to create a new Subcription","requestBody":{"description":"Data to create a new Subscription","required":true,"content":{"application/json":{"schema":{"type":"object","$ref":"#/components/schemas/SubscriptionPayload"},"example":{"value":100,"customer":{"name":"Dan","taxID":"31324227036","email":"email0@example.com","phone":"5511999999999"}}}}},"responses":{"200":{"description":"The subscription created","content":{"application/json":{"schema":{"type":"object","properties":{"subscription":{"$ref":"#/components/schemas/Subscription"}},"example":{"subscription":{"globalID":"UGF5bWVudFN1YnNjcmlwdGlvbjo2M2UzYjJiNzczZDNkOTNiY2RkMzI5OTM=","customer":{"name":"Dan","email":"email0@example.com","phone":"5511999999999","taxID":{"taxID":"31324227036","type":"BR:CPF"}},"value":100}}}}}},"400":{"description":"An error message","content":{"application/json":{"schema":{"type":"object","properties":{"error":{"type":"string"}}}}}}},"x-codeSamples":[{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.openpix.com.br\",\n  \"port\": null,\n  \"path\": \"/api/v1/subscriptions\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"REPLACE_KEY_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  customer: {name: 'string', email: 'string', phone: 'string', taxID: 'string'},\n  value: 0\n}));\nreq.end();"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.openpix.com.br/api/v1/subscriptions \\\n  --header 'Authorization: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"customer\":{\"name\":\"string\",\"email\":\"string\",\"phone\":\"string\",\"taxID\":\"string\"},\"value\":0}'"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.openpix.com.br/api/v1/subscriptions\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"customer\\\":{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\"},\\\"value\\\":0}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: REPLACE_KEY_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.openpix.com.br\")\n\npayload = \"{\\\"customer\\\":{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\"},\\\"value\\\":0}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"POST\", \"/api/v1/subscriptions\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.openpix.com.br/api/v1/subscriptions\"\n\n\tpayload := strings.NewReader(\"{\\\"customer\\\":{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\"},\\\"value\\\":0}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"customer\\\":{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\"},\\\"value\\\":0}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.openpix.com.br/api/v1/subscriptions\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"Authorization\", \"REPLACE_KEY_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.openpix.com.br/api/v1/subscriptions\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"Authorization\"] = 'REPLACE_KEY_VALUE'\nrequest.body = \"{\\\"customer\\\":{\\\"name\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"phone\\\":\\\"string\\\",\\\"taxID\\\":\\\"string\\\"},\\\"value\\\":0}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}}},"components":{"schemas":{"Charge":{"type":"object","properties":{"value":{"type":"number"},"customer":{"type":"object","$ref":"#/components/schemas/Customer"},"comment":{"type":"string"},"brCode":{"type":"string","description":"EMV BRCode to be rendered as a QRCode"},"status":{"type":"string","enum":["ACTIVE","COMPLETED","EXPIRED"]},"correlationID":{"type":"string","description":"Your correlation ID to keep track of this charge"},"paymentLinkID":{"type":"string","description":"Payment Link ID, used on payment link and to retrieve qrcode image"},"paymentLinkUrl":{"description":"Payment Link URL to be shared with customers"},"globalID":{"description":"External ID of this charge"},"transactionID":{"description":"unique uuid used as the txid from Pix into the provider from your openpix account. This field link the charge with the transaction when paid."},"identifier":{"type":"string","description":"Custom identifier for EMV"},"qrCodeImage":{"description":"QRCode image link URL"},"additionalInfo":{"description":"Additional info of the charge","type":"array","items":{"type":"object","properties":{"key":{"description":"key of object","type":"string"},"value":{"description":"value of object","type":"string"}}}},"pixKey":{"type":"string"},"createdAt":{"type":"string"},"updatedAt":{"type":"string"},"expiresIn":{"type":"string"}}},"ChargePayload":{"type":"object","properties":{"correlationID":{"type":"string","description":"Your correlation ID to keep track of this charge"},"value":{"type":"number","description":"Value in cents of this charge"},"comment":{"type":"string","description":"Comment to be added in infoPagador"},"identifier":{"type":"string","description":"Custom identifier for EMV"},"expiresIn":{"type":"number","description":"Expires the charge in seconds (minimum is 15 minutes)"},"customer":{"type":"object","description":"Payer of this charge","properties":{"name":{"type":"string","description":"Customer name"},"email":{"type":"string","description":"Customer email"},"phone":{"type":"string","description":"Customer phone"},"taxID":{"type":"string","description":"Customer taxID (CPF or CNPJ)"}}},"additionalInfo":{"type":"array","description":"Additional info of the charge","items":{"type":"object","properties":{"key":{"type":"string","description":"key of object"},"value":{"type":"string","description":"value of object"}}}}},"required":["correlationID","value"]},"Refund":{"type":"object","properties":{"value":{"type":"number"},"status":{"type":"string","enum":["IN_PROCESSING","REFUNDED","NOT_ACCOMPLISHED"]},"correlationID":{"type":"string","description":"Your correlation ID to keep track of this refund"},"refundId":{"type":"string","description":"Unique refund ID for this pix refund"},"time":{"type":"string","description":"Time of this refund"}}},"RefundPayload":{"type":"object","properties":{"value":{"type":"number"},"transactionEndToEndId":{"type":"string","description":"Your transaction ID, or endToEnd ID, to keep track of this refund"},"correlationID":{"type":"string","description":"Your correlation ID, unique identifier refund"}}},"Customer":{"type":"object","properties":{"name":{"type":"string"},"email":{"type":"string"},"phone":{"type":"string"},"taxID":{"type":"object","properties":{"taxID":{"type":"string"},"type":{"type":"string"}}},"correlationID":{"type":"string"}}},"CustomerPayload":{"type":"object","properties":{"Customer":{"type":"object","properties":{"name":{"type":"string"},"email":{"type":"string"},"phone":{"type":"string"},"taxID":{"type":"string"},"correlationID":{"type":"string"}},"required":["name"]}}},"Transaction":{"type":"object","properties":{"charge":{"type":"object","$ref":"#/components/schemas/Charge"},"value":{"type":"number"},"time":{"type":"string"},"endToEndID":{"type":"string"},"transactionID":{"type":"string"},"infoPagador":{"type":"string"},"endToEndId":{"type":"string"},"customer":{"type":"object","$ref":"#/components/schemas/Customer"},"withdraw":{"type":"object","$ref":"#/components/schemas/PixWithdrawTransaction"},"payer":{"type":"object","$ref":"#/components/schemas/Customer"},"type":{"type":"string","description":"Pix Transaction type","enum":["PAYMENT","WITHDRAW"]},"globalID":{"description":"External ID of this transaction"},"pixQrCode":{"type":"object","$ref":"#/components/schemas/PixQrCode"}}},"PixWithdrawTransaction":{"type":"object","properties":{"value":{"type":"number"},"time":{"type":"string"},"endToEndID":{"type":"string"},"transactionID":{"type":"string"},"infoPagador":{"type":"string"},"endToEndId":{"type":"string"},"payer":{"type":"object","$ref":"#/components/schemas/Customer"},"type":{"type":"string"}}},"WebhookPayload":{"type":"object","properties":{"name":{"type":"number"},"event":{"type":"string","description":"The event to listen to. If omitted, the webhook will be registered to listen the OPENPIX:TRANSACTION_RECEIVED. Event called when a new pix transactions is received","$ref":"#/components/schemas/WebhookEventEnum"},"url":{"type":"string"},"authorization":{"type":"string"},"isActive":{"type":"boolean"}}},"Webhook":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"number"},"event":{"type":"string","$ref":"#/components/schemas/WebhookEventEnum"},"url":{"type":"string"},"authorization":{"type":"string"},"isActive":{"type":"boolean"},"createdAt":{"type":"string"},"updatedAt":{"type":"string"}}},"WebhookEventEnum":{"type":"string","description":"Available events to register a webhook to listen to. If no one selected anyone the default event will be OPENPIX:TRANSACTION_RECEIVED.\n\n* **OPENPIX:CHARGE_CREATED** - New charge created\n* **OPENPIX:CHARGE_COMPLETED** - Charge completed is when a charge is fully paid\n* **OPENPIX:CHARGE_EXPIRED** - Charge expired is when a charge is not fully paid and expired\n* **OPENPIX:TRANSACTION_RECEIVED** - New PIX transaction received\n* **OPENPIX:TRANSACTION_REFUND_RECEIVED** - New PIX transaction refund received or refunded\n","enum":["OPENPIX:CHARGE_CREATED","OPENPIX:CHARGE_COMPLETED","OPENPIX:CHARGE_EXPIRED","OPENPIX:TRANSACTION_RECEIVED","OPENPIX:TRANSACTION_REFUND_RECEIVED"]},"End":{"type":"string","format":"date-time","title":"End Date","description":"End date used in the query. Complies with RFC 3339.","example":"2020-12-01T17:00:00Z"},"Start":{"type":"string","format":"date-time","title":"Start Date","description":"Start date used in the query. Complies with RFC 3339.","example":"2020-01-01T00:00:00Z"},"PixQrCode":{"type":"object","properties":{"name":{"type":"string"},"value":{"type":"string"},"comment":{"type":"string"},"identifier":{"type":"string","description":"Custom identifier for EMV"},"brCode":{"type":"string","description":"EMV BRCode to be rendered as a Pix QRCode"},"correlationID":{"type":"string","description":"Your correlation ID to keep track of this pix qrcode"},"paymentLinkID":{"type":"string","description":"Payment Link ID, used on payment link and to retrieve qrcode image"},"paymentLinkUrl":{"description":"Payment Link URL to be shared with customers"},"qrCodeImage":{"description":"QRCode image link URL"},"createdAt":{"type":"string"},"updatedAt":{"type":"string"}}},"PixQrCodePayload":{"type":"object","properties":{"name":{"type":"string","description":"Name of this pix qrcode"},"correlationID":{"type":"string","description":"Your correlation ID to keep track of this qrcode"},"value":{"type":"number","description":"Value in cents of this qrcode"},"comment":{"type":"string","description":"Comment to be added in infoPagador"},"identifier":{"type":"string","description":"Custom identifier for EMV"}},"required":["name","identifier"]},"PayPixKeyPayload":{"type":"object","properties":{"correlationID":{"type":"string","description":"Your correlation ID to keep track of this payment"},"pixKey":{"type":"string","description":"Pix Key of destination account"},"pixKeyType":{"description":"Pix Key type of destination account","type":"string","enum":["CPF","CNPJ","EMAIL","PHONE","RANDOM"]},"value":{"description":"Value of this payment in cents","type":"number"}}},"PayQRCodeload":{"type":"object","properties":{"correlationID":{"type":"string","description":"Your correlation ID to keep track of this payment"},"qrcode":{"type":"string","description":"QRCode text content EMV"},"value":{"description":"Value of this payment in cents, it won't be used if QRCode has a predefined value","type":"number"}}},"PayConfirmPayload":{"type":"object","properties":{"correlationID":{"type":"string","description":"Your correlation ID to keep track of this payment"}}},"DestinationAccount":{"type":"object","properties":{"pixKey":{"type":"string","description":"Pix Key of this destination account"},"pixKeyType":{"type":"string","description":"Pix Key type of this destination account","enum":["CPF","CNPJ","EMAIL","PHONE","RANDOM"]},"account":{"type":"object","properties":{"branch":{"type":"string","description":"Branch of destination account"},"account":{"type":"string","description":"Account number of destination account"},"accountType":{"type":"string","description":"Account type of destination account"}}},"psp":{"type":"object","properties":{"id":{"type":"string","description":"Payment Service Provider id"},"name":{"type":"string","description":"Payment Service Provider name"},"code":{"type":"string","description":"Payment Service Provider code"}}},"holder":{"type":"object","properties":{"name":{"type":"string","description":"Account holder name"},"nameFriendly":{"type":"string","description":"Account holder name friendly (Nome Fantasia)"},"taxID":{"type":"object","properties":{"taxID":{"type":"string","description":"Tax Identifier (CPF/CNPJ) of account holder"},"type":{"type":"string","description":"Tax Identifier type","enum":["CPF","CNPJ"]}}}}}}},"PaymentPixKey":{"type":"object","properties":{"correlationID":{"type":"string","description":"your correlation ID to keep track of this payment"},"value":{"description":"Value of this payment in cents","type":"number"},"status":{"type":"string","description":"Payment status","enum":["PENDING","CONFIRMED"]},"destination":{"type":"object","description":"account destination info of this pix key","$ref":"#/components/schemas/DestinationAccount"}}},"PayConfirmPayment":{"type":"object","properties":{"correlationID":{"type":"string","description":"your correlation ID to keep track of this payment"},"value":{"description":"Value of this payment in cents","type":"number"},"status":{"type":"string","description":"Payment status","enum":["PENDING","CONFIRMED"]}}},"User":{"type":"object","properties":{"_id":{"type":"string"},"updatedAt":{"type":"string"},"createdAt":{"type":"string"},"nick":{"type":"string"},"taxID":{"type":"string"},"company":{"type":"string"},"phoneNumbers":{"type":"string"},"active":{"type":"string"},"isBlocked":{"type":"string"},"name":{"type":"string"},"manager":{"type":"string"},"roles":{"type":"string"},"roleGroups":{"type":"string"},"emails":{"type":"string"},"lang":{"type":"string"},"journeySchedule":{"type":"string"},"tags":{"type":"string"},"costRevenueCenter":{"type":"string"},"correlationID":{"type":"string"},"gender":{"type":"string"},"birthDate":{"type":"string"},"admissionDate":{"type":"string"},"demissionDate":{"type":"string"},"businessDivision":{"type":"string"},"jobTitle":{"type":"string"}}},"UserPayload":{"type":"object","properties":{"id":{"type":"string"},"emails":{"type":"array","items":{"type":"string"}},"taxID":{"type":"string"},"name":{"type":"string"},"nick":{"type":"string"},"gender":{"type":"string"},"tags":{"type":"string"},"correlationID":{"type":"string"},"manager":{"type":"string"},"area":{"type":"string"},"phoneNumbers":{"type":"array","items":{"type":"string"}},"birthDate":{"type":"string","format":"date"},"admissionDate":{"type":"string","format":"date"},"demissionDate":{"type":"string","format":"date"},"password":{"type":"string"}}},"ApplicationEnumTypePayload":{"type":"string","description":"Type of the application that you want to register. Each of this has some kind of permissions.","enum":["API","PLUGIN","ORACLE"]},"TaxIDObjectPayload":{"type":"object","properties":{"taxID":{"type":"string","description":"The tax identifier of your account holder. This should be a raw string with only digits."},"type":{"type":"string","enum":["BR:CNPJ"]}}},"PreRegistrationUserObject":{"type":"object","properties":{"firstName":{"type":"string","description":"The user's first name.\nIf the pre registration has been approved, this will be turn the company's first user first name.\n"},"lastName":{"type":"string","description":"The user's last name.\nIf the pre registration has been approved, this will be turn the company's first user last name.\n"},"email":{"type":"string","description":"The user's email.\nIt'll be the email that will entered in contact to validate that it's a real person (it's a step to approve the preregistration).\nAfter approving the preregistration, it'll be the company's user email.\n"},"phone":{"type":"string","description":"The user's phone number, need to be a validated phone number because it'll receive a SMS confirming that is a real person.\nWe're accept only values that matches the E.164 standard, that follows this pattern: [+][country code][local phone number].\n"}},"required":["firstName","lastName","email","phone"]},"PreRegistrationObject":{"type":"object","properties":{"name":{"type":"string","description":"The name of this preregistration. It'll be related as your company name too."},"website":{"type":"string","description":"A website that is related to this preregistration."},"taxID":{"$ref":"#/components/schemas/TaxIDObjectPayload"}},"required":["name","taxID"]},"PreRegistrationPayloadObject":{"type":"object","properties":{"preRegistration":{"$ref":"#/components/schemas/PreRegistrationObject"},"user":{"$ref":"#/components/schemas/PreRegistrationUserObject"}}},"AccountObjectPayload":{"type":"object","properties":{"clientId":{"type":"string","description":"The client ID from the company bank account that is related to this preregistration/company."}}},"CompanyObjectPayload":{"type":"object","properties":{"id":{"type":"string","description":"The ID of the company that is related to this preregistration."},"name":{"type":"string","description":"The name of the company that is related to this preregistration."},"taxID":{"$ref":"#/components/schemas/TaxIDObjectPayload"}}},"PreRegistrationObjectPayload":{"type":"object","properties":{"name":{"type":"string","description":"When the preregistration will turn a company, this will be the name of the company that this preregistration is related."},"taxID":{"$ref":"#/components/schemas/TaxIDObjectPayload"}}},"PartnerApplicationPayload":{"type":"object","properties":{"name":{"type":"string","description":"The name that identifies your application."},"isActive":{"type":"boolean","description":"Current status of your application."},"type":{"$ref":"#/components/schemas/ApplicationEnumTypePayload"},"clientId":{"type":"string","description":"The ID of this client application."},"clientSecret":{"type":"string","description":"The secret of this client application."}}},"CompanyBankAccount":{"type":"object","properties":{"accountId":{"type":"string","description":"ID of the Account"},"isDefault":{"type":"boolean"},"balance":{"type":"object","properties":{"total":{"type":"number","description":"Total amount in cents"},"blocked":{"type":"number","description":"Blocked amount in cents"},"available":{"type":"number","description":"Available amount in cents"}}}}},"WithdrawTransaction":{"type":"object","properties":{"endToEndId":{"type":"string","description":"ID of the Withdraw Transaction"},"value":{"type":"string"}}},"Subscription":{"type":"object","properties":{"value":{"type":"number","description":"Value in cents of the subscription"},"customer":{"type":"object","$ref":"#/components/schemas/Customer"}}},"SubscriptionPayload":{"type":"object","properties":{"customer":{"type":"object","description":"Customer of this subscription","properties":{"name":{"type":"string","description":"Customer name"},"email":{"type":"string","description":"Customer email"},"phone":{"type":"string","description":"Customer phone"},"taxID":{"type":"string","description":"Customer taxID (CPF or CNPJ)"}}},"value":{"type":"number","description":"Value in cents of this subscription"}},"required":["customer","value"]}},"securitySchemes":{"AppID":{"type":"apiKey","in":"header","name":"Authorization"}}},"tags":[{"name":"charge","description":"Endpoint to manage Charges\n"},{"name":"customer","description":"Endpoint to manage Customer\n"},{"name":"payment","description":"Endpoint to init a payment using a Pix Key or QRCode.<br />\n"},{"name":"partner (request access)","description":"Partners integrate affiliated companies.<br/>\nThey can register new companies, manage them, and earn money from them.\n"},{"name":"subscription","description":"Endpoint to manage Subscriptions\n"}]}
